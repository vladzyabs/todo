{"version":3,"sources":["components/Todolist/Todolist.module.scss","components/Task/Task.module.scss","serviceWorker.ts","components/ AddItemForm/AddItemForm.tsx","components/common/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","App.tsx","store/todolist/todolistAction.ts","store/todolist/todolistsType.ts","store/task/taskAction.ts","store/task/taskType.ts","store/todolist/todolistReducer.ts","store/task/taskReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemFrom","React","memo","props","addItem","useState","title","setTitle","error","setError","clickAddItem","useCallback","newTitle","trim","TextField","id","label","variant","value","helperText","onChange","e","currentTarget","onKeyPress","charCode","Tooltip","aria-label","IconButton","onClick","color","EditableSpan","changeValue","editMode","setEditMode","offMode","ctrlKey","onBlur","autoFocus","onDoubleClick","Task","todoID","task","removeTask","changeTaskStatus","changeTaskTitle","onChangeHandler","checked","onClickHandler","onChangeTitle","className","styles","Checkbox","isDone","Todolist","filterTasks","addTask","filter","changeFilter","removeTodo","changeTodoTitle","addTaskCallback","onClickFilter","FilterValue","removeTodoCallback","onChangeTodoTitle","filterBtnVariant","filterValue","tasks","t","Paper","elevation","todo","map","key","ButtonGroup","btnGroup","Button","App","todolists","useSelector","state","dispatch","useDispatch","addTodo","type","v1","todoACs","newValue","taskACs","taskID","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","style","padding","spacing","item","initialState","rootReducer","combineReducers","action","newTask","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cc132e7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"Todolist_todo__1Eyvk\",\"btnGroup\":\"Todolist_btnGroup__3u4Qu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2p58y\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. AppWithState is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {TextField} from '@material-ui/core';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\ntype AddItemFromPropsType = {\r\n   addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemFrom = React.memo(\r\n   (props: AddItemFromPropsType) => {\r\n\r\n      const {addItem} = props\r\n\r\n      const [title, setTitle] = useState<string>('')\r\n      const [error, setError] = useState<string | null>(null)\r\n\r\n      const clickAddItem = useCallback(\r\n         () => {\r\n            let newTitle = title.trim()\r\n            if (newTitle) {\r\n               addItem(newTitle)\r\n               setTitle('')\r\n            } else {\r\n               setError('Title is required')\r\n            }\r\n         },\r\n         [title, addItem],\r\n      )\r\n\r\n      const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n         setTitle(e.currentTarget.value)\r\n      }\r\n\r\n      const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n         if (error) {\r\n            setError(null)\r\n         }\r\n         if (e.charCode === 13) {\r\n            clickAddItem()\r\n         }\r\n      }\r\n\r\n      return (\r\n         <div>\r\n            <TextField id=\"outlined-basic\"\r\n                       label=\"Title\"\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onPressEnter}/>\r\n            <Tooltip title={'Add'} aria-label=\"add\">\r\n               <IconButton aria-label=\"delete\" onClick={clickAddItem}>\r\n                  <AddIcon color=\"action\"/>\r\n               </IconButton>\r\n            </Tooltip>\r\n         </div>\r\n      )\r\n   },\r\n)\r\nexport default AddItemFrom\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n   value: string\r\n   changeValue: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo(\r\n   (props: EditableSpanPropsType) => {\r\n\r\n      const {value, changeValue} = props\r\n\r\n      const [editMode, setEditMode] = useState<boolean>(false)\r\n      const [title, setTitle] = useState<string>(props.value)\r\n\r\n      const onMode = () => setEditMode(true)\r\n      const offMode = useCallback(\r\n         () => {\r\n            setEditMode(false)\r\n            !title.trim()\r\n               ? changeValue(value)\r\n               : changeValue(title)\r\n         },\r\n         [changeValue, value, title],\r\n      )\r\n\r\n      const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n      const onCtrlEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n         if (e.ctrlKey && e.charCode === 13) {\r\n            offMode()\r\n         }\r\n      }\r\n\r\n      return (\r\n         <>\r\n            {\r\n               editMode\r\n                  ? <TextField value={title}\r\n                               onChange={changeTitle}\r\n                               onKeyPress={onCtrlEnter}\r\n                               onBlur={offMode}\r\n                               autoFocus/>\r\n                  : <span onDoubleClick={onMode}>{props.value}</span>\r\n            }\r\n         </>\r\n      )\r\n   },\r\n)\r\nexport default EditableSpan\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {TasksType} from '../../store/task/taskType';\r\nimport styles from './Task.module.scss';\r\nimport {Checkbox} from '@material-ui/core';\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\ntype TaskPropsType = {\r\n   todoID: string\r\n   task: TasksType\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: boolean) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n}\r\n\r\nconst Task = React.memo(\r\n   (props: TaskPropsType) => {\r\n\r\n      const {todoID, task, removeTask, changeTaskStatus, changeTaskTitle} = props\r\n\r\n      const onChangeHandler = useCallback(\r\n         (e: ChangeEvent<HTMLInputElement>) =>\r\n            changeTaskStatus(todoID, task.id, e.currentTarget.checked),\r\n         [todoID, task.id, changeTaskStatus],\r\n      )\r\n\r\n      const onClickHandler = useCallback(\r\n         () => removeTask(todoID, task.id),\r\n         [todoID, task.id, removeTask],\r\n      )\r\n\r\n      const onChangeTitle = useCallback(\r\n         (title: string) => changeTaskTitle(todoID, task.id, title),\r\n         [todoID, task.id, changeTaskTitle],\r\n      )\r\n\r\n      return <div className={styles.task}>\r\n         <Checkbox\r\n            color=\"primary\"\r\n            checked={task.isDone} onChange={onChangeHandler}\r\n         />\r\n         <EditableSpan value={task.title} changeValue={onChangeTitle}/>\r\n         <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n            <DeleteIcon color=\"action\"/>\r\n         </IconButton>\r\n      </div>\r\n   },\r\n)\r\n\r\nexport default Task\r\n","import React, {useCallback} from 'react';\r\nimport AddItemFrom from '../ AddItemForm/AddItemForm';\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from './Todolist.module.scss';\r\nimport {TasksType} from '../../store/task/taskType';\r\nimport {FilterType} from '../../store/todolist/todolistsType';\r\nimport Task from '../Task/Task';\r\n\r\ntype TodolistPropsType = {\r\n   todoID: string\r\n   title: string\r\n   filter: FilterType\r\n   tasks: TasksType[]\r\n   removeTodo: (todoID: string) => void\r\n   changeTodoTitle: (todoID: string, value: string) => void\r\n   changeFilter: (todoID: string, filter: FilterType) => void\r\n   addTask: (todoID: string, title: string) => void\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: boolean) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n}\r\n\r\nconst Todolist = React.memo(\r\n   (props: TodolistPropsType) => {\r\n\r\n      const {todoID, addTask, filter, changeFilter, removeTodo, changeTodoTitle} = props\r\n\r\n      const addTaskCallback = useCallback(\r\n         (title: string) => {\r\n            addTask(todoID, title)\r\n         },\r\n         [todoID, addTask],\r\n      )\r\n\r\n      const onClickFilter = useCallback(\r\n         (FilterValue: FilterType) => {\r\n            changeFilter(todoID, FilterValue)\r\n         },\r\n         [todoID, changeFilter],\r\n      )\r\n\r\n      const removeTodoCallback = useCallback(\r\n         () => removeTodo(todoID),\r\n         [todoID, removeTodo],\r\n      )\r\n\r\n      const onChangeTodoTitle = useCallback(\r\n         (value: string) => {\r\n            changeTodoTitle(todoID, value)\r\n         },\r\n         [todoID, changeTodoTitle],\r\n      )\r\n\r\n      const filterBtnVariant = useCallback(\r\n         (filterValue: FilterType) => {\r\n            return filter === filterValue ? 'contained' : 'outlined'\r\n         },\r\n         [filter],\r\n      )\r\n\r\n      let filterTasks\r\n      switch (filter) {\r\n         case 'active':\r\n            filterTasks = props.tasks.filter(t => !t.isDone)\r\n            break\r\n         case 'completed':\r\n            filterTasks = props.tasks.filter(t => t.isDone)\r\n            break\r\n         default:\r\n            filterTasks = props.tasks\r\n      }\r\n\r\n      return (\r\n         <Paper elevation={3} variant=\"outlined\" className={styles.todo}>\r\n            <h3><EditableSpan value={props.title} changeValue={onChangeTodoTitle}/>\r\n               <IconButton aria-label=\"delete\" onClick={removeTodoCallback}>\r\n                  <DeleteIcon color=\"action\"/>\r\n               </IconButton>\r\n            </h3>\r\n            <div>\r\n               <AddItemFrom addItem={addTaskCallback}/>\r\n            </div>\r\n            {\r\n               filterTasks.map(t => {\r\n                  return <Task key={t.id} todoID={props.todoID}\r\n                               task={t}\r\n                               removeTask={props.removeTask}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               changeTaskTitle={props.changeTaskTitle}/>\r\n               })\r\n            }\r\n            <div>\r\n               <ButtonGroup color=\"primary\" aria-label=\"filter button group\" className={styles.btnGroup}>\r\n                  <Button onClick={() => onClickFilter('all')}\r\n                          variant={filterBtnVariant('all')}>All</Button>\r\n                  <Button onClick={() => onClickFilter('active')}\r\n                          variant={filterBtnVariant('active')}>Active</Button>\r\n                  <Button onClick={() => onClickFilter('completed')}\r\n                          variant={filterBtnVariant('completed')}>Completed</Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </Paper>\r\n      )\r\n   },\r\n)\r\n\r\nexport default Todolist\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport Todolist from './components/Todolist/Todolist';\r\nimport AddItemFrom from './components/ AddItemForm/AddItemForm';\r\nimport {AppBar} from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuOutlinedIcon from '@material-ui/icons/MenuOutlined';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport * as todoACs from './store/todolist/todolistAction';\r\nimport * as taskACs from './store/task/taskAction';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store/store';\r\nimport {FilterType, TodolistType} from './store/todolist/todolistsType';\r\nimport {TasksStateType} from './store/task/taskType';\r\n\r\nfunction App() {\r\n\r\n   const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todo)\r\n   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.task)\r\n   const dispatch = useDispatch()\r\n\r\n   const addTodo = useCallback(\r\n      (title: string) => {\r\n         dispatch(todoACs.addTodoAC(title))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const removeTodo = useCallback(\r\n      (todoID: string) => {\r\n         dispatch(todoACs.removeTodoAC(todoID))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTodoTitle = useCallback(\r\n      (todoID: string, value: string) => {\r\n         dispatch(todoACs.changeTitleTodoAC(todoID, value))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const changeFilter = useCallback(\r\n      (todoID: string, value: FilterType) => {\r\n         dispatch(todoACs.changeFilterTodoAC(todoID, value))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const addTask = useCallback(\r\n      (todoID: string, title: string) => {\r\n         dispatch(taskACs.addTaskAC(todoID, title))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const removeTask = useCallback(\r\n      (todoID: string, taskID: string) => {\r\n         dispatch(taskACs.removeTaskAC(todoID, taskID))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTaskStatus = useCallback(\r\n      (todoID: string, taskID: string, value: boolean) => {\r\n         dispatch(taskACs.changeStatusTaskAC(todoID, taskID, value))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTaskTitle = useCallback(\r\n      (todoID: string, taskID: string, value: string) => {\r\n         dispatch(taskACs.changeTitleTaskAC(todoID, taskID, value))\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <AppBar position=\"static\">\r\n            <Toolbar>\r\n               <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                  <MenuOutlinedIcon/>\r\n               </IconButton>\r\n               <Typography variant=\"h6\">\r\n                  Todo\r\n               </Typography>\r\n               <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n         </AppBar>\r\n\r\n         <Container fixed>\r\n            <Grid container style={{padding: '10px'}}>\r\n               <AddItemFrom addItem={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n               {\r\n                  todolists.map(todo => {\r\n                     return <Grid item key={todo.id}>\r\n                        <Todolist todoID={todo.id}\r\n                                  title={todo.title}\r\n                                  filter={todo.filter}\r\n                                  tasks={tasks[todo.id]}\r\n                                  removeTodo={removeTodo}\r\n                                  changeTodoTitle={changeTodoTitle}\r\n                                  addTask={addTask}\r\n                                  changeFilter={changeFilter}\r\n                                  changeTaskStatus={changeTaskStatus}\r\n                                  removeTask={removeTask}\r\n                                  changeTaskTitle={changeTaskTitle}/>\r\n                     </Grid>\r\n                  })\r\n               }\r\n            </Grid>\r\n         </Container>\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","import {ADD_TODO, CHANGE_FILTER_TODO, CHANGE_TITLE_TODO, FilterType, REMOVE_TODO} from './todolistsType';\r\nimport {v1} from 'uuid';\r\n\r\nexport type AddTodoActionType = { type: typeof ADD_TODO, todoID: string, title: string }\r\nexport const addTodoAC = (title: string): AddTodoActionType => {\r\n   return {\r\n      type: ADD_TODO,\r\n      todoID: v1(),\r\n      title,\r\n   }\r\n}\r\n\r\nexport type RemoveTodoActionType = { type: typeof REMOVE_TODO, todoID: string }\r\nexport const removeTodoAC = (todoID: string): RemoveTodoActionType => {\r\n   return {\r\n      type: REMOVE_TODO,\r\n      todoID,\r\n   }\r\n}\r\n\r\ntype ChangeTitleTodoActionType = { type: typeof CHANGE_TITLE_TODO, todoID: string, newValue: string }\r\nexport const changeTitleTodoAC = (todoID: string, newValue: string): ChangeTitleTodoActionType => {\r\n   return {\r\n      type: CHANGE_TITLE_TODO,\r\n      todoID,\r\n      newValue,\r\n   }\r\n}\r\n\r\ntype ChangeFilterTodoActionType = { type: typeof CHANGE_FILTER_TODO, todoID: string, newValue: FilterType }\r\nexport const changeFilterTodoAC = (todoID: string, newValue: FilterType): ChangeFilterTodoActionType => {\r\n   return {\r\n      type: CHANGE_FILTER_TODO,\r\n      todoID,\r\n      newValue,\r\n   }\r\n}\r\n\r\nexport type ActionType\r\n   = AddTodoActionType\r\n   | RemoveTodoActionType\r\n   | ChangeTitleTodoActionType\r\n   | ChangeFilterTodoActionType\r\n","export const ADD_TODO = 'ADD_TODO'\r\nexport const REMOVE_TODO = 'REMOVE_TODO'\r\nexport const CHANGE_TITLE_TODO = 'CHANGE_TITLE_TODO'\r\nexport const CHANGE_FILTER_TODO = 'CHANGE_FILTER_TODO'\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistType = {\r\n   id: string\r\n   title: string\r\n   filter: FilterType\r\n}\r\n","import {ADD_TASK, CHANGE_STATUS_TASK, CHANGE_TITLE_TASK, REMOVE_TASK} from './taskType';\r\nimport {AddTodoActionType, RemoveTodoActionType} from '../todolist/todolistAction';\r\n\r\ntype AddTaskActionType = { type: typeof ADD_TASK, todoID: string, title: string }\r\nexport const addTaskAC = (todoID: string, title: string): AddTaskActionType => {\r\n   return {\r\n      type: ADD_TASK,\r\n      todoID,\r\n      title,\r\n   }\r\n}\r\n\r\ntype RemoveTaskActionType = { type: typeof REMOVE_TASK, todoID: string, taskID: string }\r\nexport const removeTaskAC = (todoID: string, taskID: string): RemoveTaskActionType => {\r\n   return {\r\n      type: REMOVE_TASK,\r\n      todoID,\r\n      taskID,\r\n   }\r\n}\r\n\r\ntype ChangeStatusTaskActionType = { type: typeof CHANGE_STATUS_TASK, todoID: string, taskID: string, newValue: boolean }\r\nexport const changeStatusTaskAC = (todoID: string, taskID: string, newValue: boolean): ChangeStatusTaskActionType => {\r\n   return {\r\n      type: CHANGE_STATUS_TASK,\r\n      todoID,\r\n      taskID,\r\n      newValue,\r\n   }\r\n}\r\n\r\ntype ChangeTitleTaskActionType = { type: typeof CHANGE_TITLE_TASK, todoID: string, taskID: string, newValue: string }\r\nexport const changeTitleTaskAC = (todoID: string, taskID: string, newValue: string): ChangeTitleTaskActionType => {\r\n   return {\r\n      type: CHANGE_TITLE_TASK,\r\n      todoID,\r\n      taskID,\r\n      newValue,\r\n   }\r\n}\r\n\r\nexport type ActionType\r\n   = AddTaskActionType\r\n   | RemoveTaskActionType\r\n   | ChangeStatusTaskActionType\r\n   | ChangeTitleTaskActionType\r\n   | AddTodoActionType\r\n   | RemoveTodoActionType\r\n","export const ADD_TASK = 'ADD_TASK'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK'\r\nexport const CHANGE_TITLE_TASK = 'CHANGE_TITLE_TASK'\r\n\r\nexport type TasksType = {\r\n   id: string\r\n   title: string\r\n   isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n   [key: string]: TasksType[]\r\n}\r\n","import {ActionType} from './todolistAction';\r\nimport {TodolistType} from './todolistsType';\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionType): TodolistType[] => {\r\n   switch (action.type) {\r\n      case 'ADD_TODO':\r\n         return [\r\n            {id: action.todoID, title: action.title, filter: 'all'},\r\n            ...state,\r\n         ]\r\n      case 'REMOVE_TODO':\r\n         return state.filter(t => t.id !== action.todoID)\r\n      case 'CHANGE_TITLE_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, title: action.newValue}\r\n            }\r\n            return t\r\n         })\r\n      case 'CHANGE_FILTER_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, filter: action.newValue}\r\n            }\r\n            return t\r\n         })\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {ActionType} from './taskAction';\r\nimport {TasksStateType} from './taskType';\r\nimport {v1} from 'uuid';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n   switch (action.type) {\r\n      case 'ADD_TASK':\r\n         const newTask = {id: v1(), title: action.title, isDone: false}\r\n         return {\r\n            ...state,\r\n            [action.todoID]: [newTask, ...state[action.todoID]],\r\n         }\r\n      case 'REMOVE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].filter(t => t.id !== action.taskID),\r\n         }\r\n      case 'CHANGE_STATUS_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].map(t => {\r\n               if (t.id !== action.taskID) return t\r\n               return {...t, isDone: action.newValue}\r\n            })\r\n         }\r\n      case 'CHANGE_TITLE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].map(t => {\r\n               if (t.id !== action.taskID) return t\r\n               return {...t, title: action.newValue}\r\n            })\r\n         }\r\n      case 'ADD_TODO':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: []\r\n         }\r\n      case 'REMOVE_TODO':\r\n         delete state[action.todoID]\r\n         return {...state}\r\n      default:\r\n         return state\r\n   }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {todolistReducer} from './todolist/todolistReducer';\r\nimport {taskReducer} from './task/taskReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n   todo: todolistReducer,\r\n   task: taskReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\nReactDOM.render(\r\n      <Provider store={store}>\r\n         <App/>\r\n      </Provider>,\r\n   document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}