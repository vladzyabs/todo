{"version":3,"sources":["serviceWorker.ts","api/apiType.ts","components/ AddItemForm/AddItemForm.tsx","components/common/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","api/api.ts","store/task/taskAction.ts","store/task/taskType.ts","components/Todolist/Todolist.tsx","store/todolist/todolistAction.ts","store/todolist/todolistsType.ts","App.tsx","store/todolist/todolistReducer.ts","store/task/taskReducer.ts","store/store.ts","index.tsx","components/Todolist/Todolist.module.scss","components/Task/Task.module.scss"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriority","AddItemFrom","React","memo","props","addItem","useState","title","setTitle","error","setError","clickAddItem","useCallback","newTitle","trim","TextField","id","label","variant","value","helperText","onChange","e","currentTarget","onKeyPress","charCode","Tooltip","aria-label","IconButton","onClick","color","EditableSpan","changeValue","editMode","setEditMode","offMode","ctrlKey","onBlur","autoFocus","onDoubleClick","Task","todoID","task","removeTask","changeTaskStatus","changeTaskTitle","onChangeHandler","status","checked","Completed","New","onClickHandler","onChangeTitle","className","styles","Checkbox","instance","axios","create","baseURL","withCredentials","headers","todoAPI","get","post","delete","put","taskAPI","taskID","model","updateTaskTC","changingValue","dispatch","getState","tasks","find","t","priority","startDate","deadline","description","then","res","data","resultCode","type","updateTaskAC","console","warn","Todolist","addTask","filter","changeFilter","removeTodo","changeTodoTitle","useDispatch","useEffect","setTasksAC","items","getTasksTC","filterTasks","addTaskCallback","onClickFilter","FilterValue","removeTodoCallback","onChangeTodoTitle","filterBtnVariant","filterValue","Paper","elevation","todo","map","key","ButtonGroup","btnGroup","Button","getTodosTC","todos","App","todolists","useSelector","state","addTodo","item","addTodoTC","removeTodoAC","removeTodoTC","newValue","changeTitleTodoAC","updateTodoTitleTC","changeFilterTodoAC","addTaskTC","removeTaskAC","removeTaskTC","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","style","padding","spacing","allTodolistTasks","initialState","rootReducer","combineReducers","action","copyState","forEach","copyStatee","newTask","todoListId","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"6JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCLMC,EAOAC,E,oDC2CGC,EArDKC,IAAMC,MACvB,SAACC,GAAiC,IAExBC,EAAWD,EAAXC,QAFuB,EAIJC,mBAAiB,IAJb,mBAIvBC,EAJuB,KAIhBC,EAJgB,OAKJF,mBAAwB,MALpB,mBAKvBG,EALuB,KAKhBC,EALgB,KAOxBC,EAAeC,uBAClB,WACG,IAAIC,EAAWN,EAAMO,OACjBD,GACDR,EAAQQ,GACRL,EAAS,KAETE,EAAS,uBAGf,CAACH,EAAOF,IAgBX,OACG,6BACG,kBAACU,EAAA,EAAD,CAAWC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WACRC,MAAOZ,EACPE,QAASA,EACTW,WAAYX,EACZY,SArBG,SAACC,GAClBd,EAASc,EAAEC,cAAcJ,QAqBXK,WAlBI,SAACF,GACfb,GACDC,EAAS,MAEO,KAAfY,EAAEG,UACHd,OAcA,kBAACe,EAAA,EAAD,CAASnB,MAAO,MAAOoB,aAAW,OAC/B,kBAACC,EAAA,EAAD,CAAYD,aAAW,SAASE,QAASlB,GACtC,kBAAC,IAAD,CAASmB,MAAM,iBCNlBC,EA1CM7B,IAAMC,MACxB,SAACC,GAAkC,IAEzBe,EAAsBf,EAAtBe,MAAOa,EAAe5B,EAAf4B,YAFiB,EAIC1B,oBAAkB,GAJnB,mBAIxB2B,EAJwB,KAIdC,EAJc,OAKL5B,mBAAiBF,EAAMe,OALlB,mBAKxBZ,EALwB,KAKjBC,EALiB,KAQzB2B,EAAUvB,uBACb,WACGsB,GAAY,GACX3B,EAAMO,OAEFkB,EAAYzB,GADZyB,EAAYb,KAGpB,CAACa,EAAab,EAAOZ,IAWxB,OACG,oCAEM0B,EACK,kBAAClB,EAAA,EAAD,CAAWI,MAAOZ,EACPc,SAbL,SAACC,GAAD,OAAsCd,EAASc,EAAEC,cAAcJ,QAc1DK,WAZL,SAACF,GACdA,EAAEc,SAA0B,KAAfd,EAAEG,UAChBU,KAWmBE,OAAQF,EACRG,WAAS,IACpB,0BAAMC,cA5BL,kBAAML,GAAY,KA4BW9B,EAAMe,W,iGF/B5CpB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KGHZ,IAoCewC,EApCFtC,IAAMC,MAChB,SAACC,GAA0B,IAEjBqC,EAA+DrC,EAA/DqC,OAAQC,EAAuDtC,EAAvDsC,KAAMC,EAAiDvC,EAAjDuC,WAAYC,EAAqCxC,EAArCwC,iBAAkBC,EAAmBzC,EAAnByC,gBAE7CC,EAAkBlC,uBACrB,SAACU,GACE,IAAMyB,EAAwBzB,EAAEC,cAAcyB,QAAWjD,EAAakD,UAAYlD,EAAamD,IAC/FN,EAAiBH,EAAQC,EAAK1B,GAAI+B,KAErC,CAACN,EAAQC,EAAK1B,GAAI4B,IAGfO,EAAiBvC,uBACpB,kBAAM+B,EAAWF,EAAQC,EAAK1B,MAC9B,CAACyB,EAAQC,EAAK1B,GAAI2B,IAGfS,EAAgBxC,uBACnB,SAACL,GAAD,OAAmBsC,EAAgBJ,EAAQC,EAAK1B,GAAIT,KACpD,CAACkC,EAAQC,EAAK1B,GAAI6B,IAGrB,OAAO,yBAAKQ,UAAWC,IAAOZ,MAC3B,kBAACa,EAAA,EAAD,CACGzB,MAAM,UACNkB,QAASN,EAAKK,SAAWhD,EAAakD,UAAW5B,SAAUyB,IAE9D,kBAAC,EAAD,CAAc3B,MAAOuB,EAAKnC,MAAOyB,YAAaoB,IAC9C,kBAACxB,EAAA,EAAD,CAAYD,aAAW,SAASE,QAASsB,GACtC,kBAAC,IAAD,CAAYrB,MAAM,gB,wBCrCxB0B,E,OAAWC,EAAMC,OAAN,aACdC,QAAS,iDARK,CACdC,iBAAiB,EACjBC,QAAS,CACN,UAAW,2CASJC,EACA,kBAAMN,EAASO,IAAT,eADND,EAEE,SAACvD,GAAD,OAAmBiD,EAASQ,KAAT,aAAiE,CAACzD,WAFvFuD,EAGE,SAACrB,GAAD,OAAoBe,EAASS,OAAT,qBAA4CxB,KAHlEqB,EAIE,SAACrB,EAAgBlC,GAAjB,OAAmCiD,EAASU,IAAT,qBAAyCzB,GAAU,CAAClC,WAGzF4D,EACA,SAAC1B,GAAD,OAAoBe,EAASO,IAAT,qBAAiDtB,EAAjD,YADpB0B,EAEE,SAAC1B,EAAgBlC,GAAjB,OAAmCiD,EAASQ,KAAT,qBAAiEvB,EAAjE,UAAiF,CAAClC,WAFvH4D,EAGE,SAAC1B,EAAgB2B,GAAjB,OAAoCZ,EAASS,OAAT,qBAA4CxB,EAA5C,kBAA4D2B,KAHlGD,EAIE,SAAC1B,EAAgB2B,EAAgBC,GAAjC,OAAgEb,EAASU,IAAT,qBAAgEzB,EAAhE,kBAAgF2B,GAAUC,IC2D5JC,EAAe,SAAC7B,EAAgB2B,EAAgBG,GAAjC,OACzB,SAACC,EAAoBC,GAClB,IAAM/B,EAAO+B,IAAWC,MAAMjC,GAAQkC,MAAK,SAAAC,GAAC,OAAIA,EAAE5D,KAAOoD,KACzD,GAAK1B,EAAL,CAIA,IAAM2B,EAA0B,aAC7B9D,MAAOmC,EAAKnC,MACZwC,OAAQL,EAAKK,OACb8B,SAAUnC,EAAKmC,SACfC,UAAWpC,EAAKoC,UAChBC,SAAUrC,EAAKqC,SACfC,YAAatC,EAAKsC,aACfT,GAENJ,EAAmB1B,EAAQ2B,EAAQC,GAC/BY,MAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACVZ,EAjFa,SAAC/B,EAAgB2B,EAAgBC,GAAjC,MAAuF,CAChHgB,KCpBwB,cDqBxB5C,SACA2B,SACAC,SA6EqBiB,CAAa7C,EAAQ2B,EAAQC,YAf5CkB,QAAQC,KAAK,iCEwBPC,EAnFEvF,IAAMC,MACpB,SAACC,GAA8B,IAErBqC,EAAsErC,EAAtEqC,OAAQiD,EAA8DtF,EAA9DsF,QAASC,EAAqDvF,EAArDuF,OAAQC,EAA6CxF,EAA7CwF,aAAcC,EAA+BzF,EAA/ByF,WAAYC,EAAmB1F,EAAnB0F,gBACpDtB,EAAWuB,cAEjBC,qBACG,WACGxB,EFmBc,SAAC/B,GAAD,OACvB,SAAC+B,GACEL,EAAiB1B,GACbwC,MAAK,SAAAC,GACHV,EA9Bc,SAAC/B,EAAgBiC,GAAjB,MAA+D,CACtFW,KC3BsB,YD4BtB5C,SACAiC,SA2BkBuB,CAAWxD,EAAQyC,EAAIC,KAAKe,YEvB5BC,CAAW1D,MAEvB,CAAC+B,EAAU/B,IAEd,IAyBI2D,EAzBEC,EAAkBzF,uBACrB,SAACL,GAAD,OAAmBmF,EAAQjD,EAAQlC,KACnC,CAACkC,EAAQiD,IAGNY,EAAgB1F,uBACnB,SAAC2F,GAAD,OAA6BX,EAAanD,EAAQ8D,KAClD,CAAC9D,EAAQmD,IAGNY,EAAqB5F,uBACxB,kBAAMiF,EAAWpD,KACjB,CAACA,EAAQoD,IAGNY,EAAoB7F,uBACvB,SAACO,GAAD,OAAmB2E,EAAgBrD,EAAQtB,KAC3C,CAACsB,EAAQqD,IAGNY,EAAmB9F,uBACtB,SAAC+F,GAAD,OAA6BhB,IAAWgB,EAAc,YAAc,aACpE,CAAChB,IAIJ,OAAQA,GACL,IAAK,SACFS,EAAchG,EAAMsE,MAAMiB,QAAO,SAAAf,GAAC,OAAIA,EAAE7B,SAAWhD,EAAamD,OAChE,MACH,IAAK,YACFkD,EAAchG,EAAMsE,MAAMiB,QAAO,SAAAf,GAAC,OAAIA,EAAE7B,SAAWhD,EAAakD,aAChE,MACH,QACGmD,EAAchG,EAAMsE,MAG1B,OACG,kBAACkC,EAAA,EAAD,CAAOC,UAAW,EAAG3F,QAAQ,WAAWmC,UAAWC,IAAOwD,MACvD,4BAAI,kBAAC,EAAD,CAAc3F,MAAOf,EAAMG,MAAOyB,YAAayE,IAChD,kBAAC7E,EAAA,EAAD,CAAYD,aAAW,SAASE,QAAS2E,GACtC,kBAAC,IAAD,CAAY1E,MAAM,aAGxB,6BACG,kBAAC,EAAD,CAAazB,QAASgG,KAGtBD,EAAYW,KAAI,SAAAnC,GACb,OAAO,kBAAC,EAAD,CAAMoC,IAAKpC,EAAE5D,GAAIyB,OAAQrC,EAAMqC,OACzBC,KAAMkC,EACNjC,WAAYvC,EAAMuC,WAClBC,iBAAkBxC,EAAMwC,iBACxBC,gBAAiBzC,EAAMyC,qBAG1C,6BACG,kBAACoE,EAAA,EAAD,CAAanF,MAAM,UAAUH,aAAW,sBAAsB0B,UAAWC,IAAO4D,UAC7E,kBAACC,EAAA,EAAD,CAAQtF,QAAS,kBAAMyE,EAAc,QAC7BpF,QAASwF,EAAiB,QADlC,OAEA,kBAACS,EAAA,EAAD,CAAQtF,QAAS,kBAAMyE,EAAc,WAC7BpF,QAASwF,EAAiB,WADlC,UAEA,kBAACS,EAAA,EAAD,CAAQtF,QAAS,kBAAMyE,EAAc,cAC7BpF,QAASwF,EAAiB,cADlC,mB,8DCxDLU,EAAa,SAAC5C,GACxBV,IACImB,MAAK,SAAAC,GACHV,EAjBgE,CACtEa,KC7BsB,YD8BtBgC,MAe0BnC,EAAIC,WE0ElBmC,MAnGf,WAEG,IAAMC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMJ,SAC9E3C,EAAQ8C,aAA8C,SAAAC,GAAK,OAAIA,EAAM/C,SACrEF,EAAWuB,cAEjBC,qBACG,WACGxB,EAAS4C,KAEZ,CAAC5C,IAGJ,IAAMkD,EAAU9G,uBACb,SAACL,GAAD,OAAmBiE,EFeA,SAACjE,GAAD,OACtB,SAACiE,GACEV,EAAmBvD,GACf0E,MAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACVZ,EApDqD,CACjEa,KCPqB,WDQrByB,KAkD+B5B,EAAIC,KAAKA,KAAKwC,WEpBdC,CAAUrH,MACtC,CAACiE,IAGEqB,EAAajF,uBAChB,SAAC6B,GAAD,OAAoB+B,EFoBE,SAAC/B,GAAD,OACzB,SAAC+B,GACEV,EAAmBrB,GACfwC,MAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACVZ,EAxDa,SAAC/B,GAAD,MAA2C,CACpE4C,KCZwB,cDaxB5C,UAsDqBoF,CAAapF,QEzBFqF,CAAarF,MAC1C,CAAC+B,IAGEsB,EAAkBlF,uBACrB,SAAC6B,EAAgBtB,GAAjB,OAAmCqD,EFyBR,SAAC/B,EAAgBlC,GAAjB,OAC9B,SAACiE,GACEV,EAAmBrB,EAAQlC,GACvB0E,MAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACVZ,EA5DkB,SAAC/B,EAAgBsF,GAAjB,MAAkE,CAChG1C,KCjB8B,oBDkB9B5C,SACAsF,YAyDqBC,CAAkBvF,EAAQlC,QE9BA0H,CAAkBxF,EAAQtB,MACtE,CAACqD,IAGEoB,EAAehF,uBAClB,SAAC6B,EAAgBtB,GAAjB,OAAuCqD,EF5BX,SAAC/B,EAAgBsF,GAAjB,MAAuE,CACtG1C,KCvB+B,qBDwB/B5C,SACAsF,YEyBmDG,CAAmBzF,EAAQtB,MAC3E,CAACqD,IAGEkB,EAAU9E,uBACb,SAAC6B,EAAgBlC,GAAjB,OAAmCiE,ELKhB,SAAC/B,EAAgBlC,GAAjB,OACtB,SAACiE,GACEL,EAAmB1B,EAAQlC,GACvB0E,MAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACVZ,EA5DqD,CACjEa,KCTqB,WDUrB3C,KA0D+BwC,EAAIC,KAAKA,KAAKwC,WKVEQ,CAAU1F,EAAQlC,MAC9D,CAACiE,IAGE7B,EAAa/B,uBAChB,SAAC6B,EAAgB2B,GAAjB,OAAoCI,ELUd,SAAC/B,EAAgB2B,GAAjB,OACzB,SAACI,GACEL,EAAmB1B,EAAQ2B,GACvBa,MAAK,SAAAC,GACyB,IAAxBA,EAAIC,KAAKC,YACVZ,EAhEa,SAAC/B,EAAgB2B,GAAjB,MAA2D,CACpFiB,KCdwB,cDexB5C,SACA2B,UA6DqBgE,CAAa3F,EAAQ2B,QKfMiE,CAAa5F,EAAQ2B,MAClE,CAACI,IAGE5B,EAAmBhC,uBACtB,SAAC6B,EAAgB2B,EAAgBjD,GAAjC,OACGqD,EAASF,EAAa7B,EAAQ2B,EAAQ,CAACrB,OAAQ5B,OAClD,CAACqD,IAGE3B,EAAkBjC,uBACrB,SAAC6B,EAAgB2B,EAAgBjD,GAAjC,OACGqD,EAASF,EAAa7B,EAAQ2B,EAAQ,CAAC7D,MAAOY,OACjD,CAACqD,IAGJ,OACG,yBAAKnB,UAAU,OACZ,kBAACiF,EAAA,EAAD,CAAQC,SAAS,UACd,kBAACC,EAAA,EAAD,KACG,kBAAC5G,EAAA,EAAD,CAAY6G,KAAK,QAAQ3G,MAAM,UAAUH,aAAW,QACjD,kBAAC,IAAD,OAEH,kBAAC+G,EAAA,EAAD,CAAYxH,QAAQ,MAApB,QAGA,kBAACiG,EAAA,EAAD,CAAQrF,MAAM,WAAd,WAIN,kBAAC6G,EAAA,EAAD,CAAWC,OAAK,GACb,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC9B,kBAAC,EAAD,CAAa3I,QAASqH,KAEzB,kBAACmB,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GAEnB1B,EAAUR,KAAI,SAAAD,GACX,IAAIoC,EAAmBxE,EAAMoC,EAAK9F,IAClC,OAAO,kBAAC6H,EAAA,EAAD,CAAMlB,MAAI,EAACX,IAAKF,EAAK9F,IACzB,kBAAC,EAAD,CAAUyB,OAAQqE,EAAK9F,GACbT,MAAOuG,EAAKvG,MACZoF,OAAQmB,EAAKnB,OACbjB,MAAOwE,EACPrD,WAAYA,EACZC,gBAAiBA,EACjBJ,QAASA,EACTE,aAAcA,EACdhD,iBAAkBA,EAClBD,WAAYA,EACZE,gBAAiBA,Y,wBC/G7CsG,GAA+B,G,SCA/BA,GAA+B,GCE/BC,GAAcC,YAAgB,CACjChC,MFD4B,WAA+D,IAA9DI,EAA6D,uDAArD0B,GAAcG,EAAuC,uCAC1F,OAAQA,EAAOjE,MACZ,IAAK,YACF,OAAOiE,EAAOjC,MAAMN,KAAI,SAAAD,GAAI,sBAASA,EAAT,CAAenB,OAAQ,WACtD,IAAK,WACF,MAAM,CAAN,eACO2D,EAAOxC,KADd,CACoBnB,OAAQ,SAD5B,mBAEM8B,IAET,IAAK,cACF,OAAOA,EAAM9B,QAAO,SAAAf,GAAC,OAAIA,EAAE5D,KAAOsI,EAAO7G,UAC5C,IAAK,oBACF,OAAOgF,EAAMV,KAAI,SAAAnC,GACd,OAAIA,EAAE5D,KAAOsI,EAAO7G,OACV,eAAImC,EAAX,CAAcrE,MAAO+I,EAAOvB,WAExBnD,KAEb,IAAK,qBACF,OAAO6C,EAAMV,KAAI,SAAAnC,GACd,OAAIA,EAAE5D,KAAOsI,EAAO7G,OACV,eAAImC,EAAX,CAAce,OAAQ2D,EAAOvB,WAEzBnD,KAEb,QACG,OAAO6C,IExBb/C,MDFwB,WAA+D,IAA9D+C,EAA6D,uDAArD0B,GAAcG,EAAuC,uCACtF,OAAQA,EAAOjE,MACZ,IAAK,YACF,IAAMkE,EAAS,eAAO9B,GAItB,OAHA6B,EAAOjC,MAAMmC,SAAQ,SAAA1C,GAClB,OAAOyC,EAAUzC,EAAK9F,IAAM,MAExBuI,EACV,IAAK,YACF,IAAME,EAAU,eAAOhC,GAEvB,OADAgC,EAAWH,EAAO7G,QAAU6G,EAAO5E,MAC5B+E,EACV,IAAK,WACF,IAAMC,EAAqBJ,EAAO5G,KAClC,OAAO,eACD+E,EADN,gBAEI6B,EAAO5G,KAAKiH,WAFhB,CAE8BD,GAF9B,mBAE0CjC,EAAM6B,EAAO5G,KAAKiH,gBAE/D,IAAK,cACF,OAAO,eACDlC,EADN,gBAEI6B,EAAO7G,OAASgF,EAAM6B,EAAO7G,QAAQkD,QAAO,SAAAf,GAAC,OAAIA,EAAE5D,KAAOsI,EAAOlF,YAExE,IAAK,cACF,OAAO,eACDqD,EADN,gBAEI6B,EAAO7G,OAASgF,EAAM6B,EAAO7G,QAAQsE,KAAI,SAAAnC,GACvC,OAAIA,EAAE5D,KAAOsI,EAAOlF,OAAeQ,EAC5B,eAAIA,EAAX,GAAiB0E,EAAOjF,YAGjC,IAAK,WACF,OAAO,eACDoD,EADN,gBAEI6B,EAAOxC,KAAK9F,GAAK,KAExB,IAAK,cAEF,cADOyG,EAAM6B,EAAO7G,QACb,eAAIgF,GACd,QACG,OAAOA,MCnCHmC,GAAQC,YAAYT,GAAaU,YAAgBC,MCF9DC,IAASC,OACH,kBAAC,IAAD,CAAUL,MAAOA,IACd,kBAAC,EAAD,OAENM,SAASC,eAAe,Sf+HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrF,MAAK,SAAAsF,GACJA,EAAaC,gBAEdC,OAAM,SAAAhK,GACL8E,QAAQ9E,MAAMA,EAAMiK,a,mBgBhJ5BC,EAAOC,QAAU,CAAC,KAAO,uBAAuB,SAAW,6B,mBCA3DD,EAAOC,QAAU,CAAC,KAAO,qB","file":"static/js/main.19d2d287.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. AppWithState is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type ResponseType<T = {}> = {\r\n   resultCode: number\r\n   messages: string[]\r\n   data: T\r\n}\r\n\r\nexport type TodoAPIType = {\r\n   id: string\r\n   title: string\r\n   addedDate: string\r\n   order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n   New,\r\n   InProgress,\r\n   Completed,\r\n   Draft,\r\n}\r\n\r\nexport enum TodoTaskPriority {\r\n   Low,\r\n   Middle,\r\n   Hi,\r\n   Urgently,\r\n   Later,\r\n}\r\n\r\nexport type TaskAPIType = {\r\n   todoListId: string\r\n   id: string\r\n   title: string\r\n   description: string\r\n   addedDate: string\r\n   startDate: string\r\n   deadline: string\r\n   order: number\r\n   status: TaskStatuses\r\n   priority: TodoTaskPriority\r\n}\r\n\r\nexport type GetTasksResponseType = {\r\n   items: TaskAPIType[]\r\n   error: string | null\r\n   totalCount: number\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n   title: string\r\n   description: string\r\n   status: number\r\n   priority: number\r\n   startDate: string\r\n   deadline: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {TextField} from '@material-ui/core';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\ntype AddItemFromPropsType = {\r\n   addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemFrom = React.memo(\r\n   (props: AddItemFromPropsType) => {\r\n\r\n      const {addItem} = props\r\n\r\n      const [title, setTitle] = useState<string>('')\r\n      const [error, setError] = useState<string | null>(null)\r\n\r\n      const clickAddItem = useCallback(\r\n         () => {\r\n            let newTitle = title.trim()\r\n            if (newTitle) {\r\n               addItem(newTitle)\r\n               setTitle('')\r\n            } else {\r\n               setError('Title is required')\r\n            }\r\n         },\r\n         [title, addItem],\r\n      )\r\n\r\n      const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n         setTitle(e.currentTarget.value)\r\n      }\r\n\r\n      const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n         if (error) {\r\n            setError(null)\r\n         }\r\n         if (e.charCode === 13) {\r\n            clickAddItem()\r\n         }\r\n      }\r\n\r\n      return (\r\n         <div>\r\n            <TextField id=\"outlined-basic\"\r\n                       label=\"Title\"\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onPressEnter}/>\r\n            <Tooltip title={'Add'} aria-label=\"add\">\r\n               <IconButton aria-label=\"delete\" onClick={clickAddItem}>\r\n                  <AddIcon color=\"action\"/>\r\n               </IconButton>\r\n            </Tooltip>\r\n         </div>\r\n      )\r\n   },\r\n)\r\nexport default AddItemFrom\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n   value: string\r\n   changeValue: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo(\r\n   (props: EditableSpanPropsType) => {\r\n\r\n      const {value, changeValue} = props\r\n\r\n      const [editMode, setEditMode] = useState<boolean>(false)\r\n      const [title, setTitle] = useState<string>(props.value)\r\n\r\n      const onMode = () => setEditMode(true)\r\n      const offMode = useCallback(\r\n         () => {\r\n            setEditMode(false)\r\n            !title.trim()\r\n               ? changeValue(value)\r\n               : changeValue(title)\r\n         },\r\n         [changeValue, value, title],\r\n      )\r\n\r\n      const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n      const onCtrlEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n         if (e.ctrlKey && e.charCode === 13) {\r\n            offMode()\r\n         }\r\n      }\r\n\r\n      return (\r\n         <>\r\n            {\r\n               editMode\r\n                  ? <TextField value={title}\r\n                               onChange={changeTitle}\r\n                               onKeyPress={onCtrlEnter}\r\n                               onBlur={offMode}\r\n                               autoFocus/>\r\n                  : <span onDoubleClick={onMode}>{props.value}</span>\r\n            }\r\n         </>\r\n      )\r\n   },\r\n)\r\nexport default EditableSpan\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {TasksType} from '../../store/task/taskType'\r\nimport styles from './Task.module.scss'\r\nimport {Checkbox} from '@material-ui/core'\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport {TaskStatuses} from '../../api/apiType'\r\n\r\ntype TaskPropsType = {\r\n   todoID: string\r\n   task: TasksType\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: TaskStatuses) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n}\r\n\r\nconst Task = React.memo(\r\n   (props: TaskPropsType) => {\r\n\r\n      const {todoID, task, removeTask, changeTaskStatus, changeTaskTitle} = props\r\n\r\n      const onChangeHandler = useCallback(\r\n         (e: ChangeEvent<HTMLInputElement>) => {\r\n            const status: TaskStatuses = (e.currentTarget.checked) ? TaskStatuses.Completed : TaskStatuses.New\r\n            changeTaskStatus(todoID, task.id, status)\r\n         },\r\n         [todoID, task.id, changeTaskStatus],\r\n      )\r\n\r\n      const onClickHandler = useCallback(\r\n         () => removeTask(todoID, task.id),\r\n         [todoID, task.id, removeTask],\r\n      )\r\n\r\n      const onChangeTitle = useCallback(\r\n         (title: string) => changeTaskTitle(todoID, task.id, title),\r\n         [todoID, task.id, changeTaskTitle],\r\n      )\r\n\r\n      return <div className={styles.task}>\r\n         <Checkbox\r\n            color=\"primary\"\r\n            checked={task.status === TaskStatuses.Completed} onChange={onChangeHandler}\r\n         />\r\n         <EditableSpan value={task.title} changeValue={onChangeTitle}/>\r\n         <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n            <DeleteIcon color=\"action\"/>\r\n         </IconButton>\r\n      </div>\r\n   },\r\n)\r\n\r\nexport default Task\r\n","import axios from 'axios'\r\nimport {GetTasksResponseType, ResponseType, TaskAPIType, TodoAPIType, UpdateTaskModelType} from './apiType'\r\n\r\nconst settings = {\r\n   withCredentials: true,\r\n   headers: {\r\n      'API-KEY': 'ec5b15d4-74e9-420d-8187-76eec8294de7',\r\n   },\r\n}\r\n\r\nconst instance = axios.create({\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n   ...settings,\r\n})\r\n\r\nexport const todoAPI = {\r\n   getTodos: () => instance.get<TodoAPIType[]>(`todo-lists`),\r\n   createTodo: (title: string) => instance.post<ResponseType<{ item: TodoAPIType }>>(`todo-lists`, {title}),\r\n   deleteTodo: (todoID: string) => instance.delete<ResponseType>(`todo-lists/${todoID}`),\r\n   updateTodo: (todoID: string, title: string) => instance.put<ResponseType>(`todo-lists/${todoID}`, {title}),\r\n}\r\n\r\nexport const taskAPI = {\r\n   getTasks: (todoID: string) => instance.get<GetTasksResponseType>(`todo-lists/${todoID}/tasks`),\r\n   createTask: (todoID: string, title: string) => instance.post<ResponseType<{ item: TaskAPIType }>>(`todo-lists/${todoID}/tasks`, {title}),\r\n   deleteTask: (todoID: string, taskID: string) => instance.delete<ResponseType>(`todo-lists/${todoID}/tasks/${taskID}`),\r\n   updateTask: (todoID: string, taskID: string, model: UpdateTaskModelType) => instance.put<ResponseType<{ item: TaskAPIType }>>(`todo-lists/${todoID}/tasks/${taskID}`, model),\r\n}\r\n","import {ADD_TASK, REMOVE_TASK, SET_TASKS, UPDATE_TASK} from './taskType'\r\nimport {AddTodoActionType, RemoveTodoActionType, SetTodosActionType} from '../todolist/todolistAction'\r\nimport {TaskAPIType, UpdateTaskModelType} from '../../api/apiType'\r\nimport {Dispatch} from 'redux'\r\nimport {taskAPI} from '../../api/api'\r\nimport {AppRootStateType} from '../store'\r\n\r\n// actions =============================================================================================================\r\n\r\ntype AddTaskActionType = { type: typeof ADD_TASK, task: TaskAPIType }\r\nexport const addTaskAC = (task: TaskAPIType): AddTaskActionType => ({\r\n   type: ADD_TASK,\r\n   task,\r\n})\r\n\r\ntype RemoveTaskActionType = { type: typeof REMOVE_TASK, todoID: string, taskID: string }\r\nexport const removeTaskAC = (todoID: string, taskID: string): RemoveTaskActionType => ({\r\n   type: REMOVE_TASK,\r\n   todoID,\r\n   taskID,\r\n})\r\n\r\ntype UpdateTaskActionType = { type: typeof UPDATE_TASK, todoID: string, taskID: string, model: UpdateTaskModelType }\r\nexport const updateTaskAC = (todoID: string, taskID: string, model: UpdateTaskModelType): UpdateTaskActionType => ({\r\n   type: UPDATE_TASK,\r\n   todoID,\r\n   taskID,\r\n   model,\r\n})\r\n\r\ntype SetTasksActionType = { type: typeof SET_TASKS, todoID: string, tasks: TaskAPIType[] }\r\nexport const setTasksAC = (todoID: string, tasks: TaskAPIType[]): SetTasksActionType => ({\r\n   type: SET_TASKS,\r\n   todoID,\r\n   tasks,\r\n})\r\n\r\nexport type ActionType\r\n   = AddTaskActionType\r\n   | RemoveTaskActionType\r\n   | UpdateTaskActionType\r\n   | AddTodoActionType\r\n   | RemoveTodoActionType\r\n   | SetTodosActionType\r\n   | SetTasksActionType\r\n\r\n// thunks ==============================================================================================================\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n   title?: string\r\n   description?: string\r\n   status?: number\r\n   priority?: number\r\n   startDate?: string\r\n   deadline?: string\r\n}\r\n\r\nexport const getTasksTC = (todoID: string) =>\r\n   (dispatch: Dispatch) => {\r\n      taskAPI.getTasks(todoID)\r\n         .then(res => {\r\n            dispatch(setTasksAC(todoID, res.data.items))\r\n         })\r\n   }\r\n\r\nexport const addTaskTC = (todoID: string, title: string) =>\r\n   (dispatch: Dispatch) => {\r\n      taskAPI.createTask(todoID, title)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(addTaskAC(res.data.data.item))\r\n            }\r\n         })\r\n   }\r\n\r\nexport const removeTaskTC = (todoID: string, taskID: string) =>\r\n   (dispatch: Dispatch) => {\r\n      taskAPI.deleteTask(todoID, taskID)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(removeTaskAC(todoID, taskID))\r\n            }\r\n         })\r\n   }\r\n\r\nexport const updateTaskTC = (todoID: string, taskID: string, changingValue: UpdateDomainTaskModelType) =>\r\n   (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n      const task = getState().tasks[todoID].find(t => t.id === taskID)\r\n      if (!task) {\r\n         console.warn('task not found in the state')\r\n         return\r\n      }\r\n      const model: UpdateTaskModelType = {\r\n         title: task.title,\r\n         status: task.status,\r\n         priority: task.priority,\r\n         startDate: task.startDate,\r\n         deadline: task.deadline,\r\n         description: task.description,\r\n         ...changingValue,\r\n      }\r\n      taskAPI.updateTask(todoID, taskID, model)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(updateTaskAC(todoID, taskID, model))\r\n            }\r\n         })\r\n   }\r\n","import {TaskAPIType} from '../../api/apiType'\r\n\r\nexport const ADD_TASK = 'ADD_TASK'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const UPDATE_TASK = 'UPDATE_TASK'\r\nexport const SET_TASKS = 'SET_TASKS'\r\n\r\nexport type TasksType = TaskAPIType\r\n\r\nexport type TasksStateType = {\r\n   [key: string]: TasksType[]\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport AddItemFrom from '../ AddItemForm/AddItemForm'\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport Button from '@material-ui/core/Button'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport styles from './Todolist.module.scss'\r\nimport {TasksType} from '../../store/task/taskType'\r\nimport {FilterType} from '../../store/todolist/todolistsType'\r\nimport Task from '../Task/Task'\r\nimport {TaskStatuses} from '../../api/apiType'\r\nimport {useDispatch} from 'react-redux'\r\nimport {getTasksTC} from '../../store/task/taskAction'\r\n\r\ntype TodolistPropsType = {\r\n   todoID: string\r\n   title: string\r\n   filter: FilterType\r\n   tasks: TasksType[]\r\n   removeTodo: (todoID: string) => void\r\n   changeTodoTitle: (todoID: string, value: string) => void\r\n   changeFilter: (todoID: string, filter: FilterType) => void\r\n   addTask: (todoID: string, title: string) => void\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: TaskStatuses) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n}\r\n\r\nconst Todolist = React.memo(\r\n   (props: TodolistPropsType) => {\r\n\r\n      const {todoID, addTask, filter, changeFilter, removeTodo, changeTodoTitle} = props\r\n      const dispatch = useDispatch()\r\n\r\n      useEffect(\r\n         () => {\r\n            dispatch(getTasksTC(todoID))\r\n         },\r\n         [dispatch, todoID])\r\n\r\n      const addTaskCallback = useCallback(\r\n         (title: string) => addTask(todoID, title),\r\n         [todoID, addTask],\r\n      )\r\n\r\n      const onClickFilter = useCallback(\r\n         (FilterValue: FilterType) => changeFilter(todoID, FilterValue),\r\n         [todoID, changeFilter],\r\n      )\r\n\r\n      const removeTodoCallback = useCallback(\r\n         () => removeTodo(todoID),\r\n         [todoID, removeTodo],\r\n      )\r\n\r\n      const onChangeTodoTitle = useCallback(\r\n         (value: string) => changeTodoTitle(todoID, value),\r\n         [todoID, changeTodoTitle],\r\n      )\r\n\r\n      const filterBtnVariant = useCallback(\r\n         (filterValue: FilterType) => filter === filterValue ? 'contained' : 'outlined',\r\n         [filter],\r\n      )\r\n\r\n      let filterTasks\r\n      switch (filter) {\r\n         case 'active':\r\n            filterTasks = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            break\r\n         case 'completed':\r\n            filterTasks = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            break\r\n         default:\r\n            filterTasks = props.tasks\r\n      }\r\n\r\n      return (\r\n         <Paper elevation={3} variant=\"outlined\" className={styles.todo}>\r\n            <h3><EditableSpan value={props.title} changeValue={onChangeTodoTitle}/>\r\n               <IconButton aria-label=\"delete\" onClick={removeTodoCallback}>\r\n                  <DeleteIcon color=\"action\"/>\r\n               </IconButton>\r\n            </h3>\r\n            <div>\r\n               <AddItemFrom addItem={addTaskCallback}/>\r\n            </div>\r\n            {\r\n               filterTasks.map(t => {\r\n                  return <Task key={t.id} todoID={props.todoID}\r\n                               task={t}\r\n                               removeTask={props.removeTask}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               changeTaskTitle={props.changeTaskTitle}/>\r\n               })\r\n            }\r\n            <div>\r\n               <ButtonGroup color=\"primary\" aria-label=\"filter button group\" className={styles.btnGroup}>\r\n                  <Button onClick={() => onClickFilter('all')}\r\n                          variant={filterBtnVariant('all')}>All</Button>\r\n                  <Button onClick={() => onClickFilter('active')}\r\n                          variant={filterBtnVariant('active')}>Active</Button>\r\n                  <Button onClick={() => onClickFilter('completed')}\r\n                          variant={filterBtnVariant('completed')}>Completed</Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </Paper>\r\n      )\r\n   },\r\n)\r\n\r\nexport default Todolist\r\n","import {ADD_TODO, CHANGE_FILTER_TODO, CHANGE_TITLE_TODO, FilterType, REMOVE_TODO, SET_TODOS} from './todolistsType'\r\nimport {TodoAPIType} from '../../api/apiType'\r\nimport {Dispatch} from 'redux'\r\nimport {todoAPI} from '../../api/api'\r\n\r\n// actions =============================================================================================================\r\n\r\nexport type AddTodoActionType = { type: typeof ADD_TODO, todo: TodoAPIType }\r\nexport const addTodoAC = (todo: TodoAPIType): AddTodoActionType => ({\r\n   type: ADD_TODO,\r\n   todo,\r\n})\r\n\r\nexport type RemoveTodoActionType = { type: typeof REMOVE_TODO, todoID: string }\r\nexport const removeTodoAC = (todoID: string): RemoveTodoActionType => ({\r\n   type: REMOVE_TODO,\r\n   todoID,\r\n})\r\n\r\ntype ChangeTitleTodoActionType = { type: typeof CHANGE_TITLE_TODO, todoID: string, newValue: string }\r\nexport const changeTitleTodoAC = (todoID: string, newValue: string): ChangeTitleTodoActionType => ({\r\n   type: CHANGE_TITLE_TODO,\r\n   todoID,\r\n   newValue,\r\n})\r\n\r\ntype ChangeFilterTodoActionType = { type: typeof CHANGE_FILTER_TODO, todoID: string, newValue: FilterType }\r\nexport const changeFilterTodoAC = (todoID: string, newValue: FilterType): ChangeFilterTodoActionType => ({\r\n   type: CHANGE_FILTER_TODO,\r\n   todoID,\r\n   newValue,\r\n})\r\n\r\nexport type SetTodosActionType = { type: typeof SET_TODOS, todos: TodoAPIType[] }\r\nexport const setTodosAC = (todos: TodoAPIType[]): SetTodosActionType => ({\r\n   type: SET_TODOS,\r\n   todos,\r\n})\r\n\r\nexport type ActionType\r\n   = AddTodoActionType\r\n   | RemoveTodoActionType\r\n   | ChangeTitleTodoActionType\r\n   | ChangeFilterTodoActionType\r\n   | SetTodosActionType\r\n\r\n// thunks ==============================================================================================================\r\n\r\nexport const getTodosTC = (dispatch: Dispatch) => {\r\n   todoAPI.getTodos()\r\n      .then(res => {\r\n         dispatch(setTodosAC(res.data))\r\n      })\r\n}\r\n\r\nexport const addTodoTC = (title: string) =>\r\n   (dispatch: Dispatch) => {\r\n      todoAPI.createTodo(title)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(addTodoAC(res.data.data.item))\r\n            }\r\n         })\r\n   }\r\n\r\nexport const removeTodoTC = (todoID: string) =>\r\n   (dispatch: Dispatch) => {\r\n      todoAPI.deleteTodo(todoID)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(removeTodoAC(todoID))\r\n            }\r\n         })\r\n   }\r\n\r\nexport const updateTodoTitleTC = (todoID: string, title: string) =>\r\n   (dispatch: Dispatch) => {\r\n      todoAPI.updateTodo(todoID, title)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(changeTitleTodoAC(todoID, title))\r\n            }\r\n         })\r\n   }\r\n","import {TodoAPIType} from '../../api/apiType'\r\n\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const REMOVE_TODO = 'REMOVE_TODO'\r\nexport const CHANGE_TITLE_TODO = 'CHANGE_TITLE_TODO'\r\nexport const CHANGE_FILTER_TODO = 'CHANGE_FILTER_TODO'\r\nexport const SET_TODOS = 'SET_TODOS'\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistType = TodoAPIType & { filter: FilterType }\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport Todolist from './components/Todolist/Todolist'\r\nimport AddItemFrom from './components/ AddItemForm/AddItemForm'\r\nimport {AppBar} from '@material-ui/core'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport MenuOutlinedIcon from '@material-ui/icons/MenuOutlined'\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store/store'\r\nimport {FilterType, TodolistType} from './store/todolist/todolistsType'\r\nimport {TasksStateType} from './store/task/taskType'\r\nimport {TaskStatuses} from './api/apiType'\r\nimport {\r\n   addTodoTC,\r\n   changeFilterTodoAC,\r\n   getTodosTC,\r\n   removeTodoTC,\r\n   updateTodoTitleTC,\r\n} from './store/todolist/todolistAction'\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from './store/task/taskAction'\r\n\r\nfunction App() {\r\n\r\n   const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todos)\r\n   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(\r\n      () => {\r\n         dispatch(getTodosTC)\r\n      },\r\n      [dispatch],\r\n   )\r\n\r\n   const addTodo = useCallback(\r\n      (title: string) => dispatch(addTodoTC(title)),\r\n      [dispatch],\r\n   )\r\n\r\n   const removeTodo = useCallback(\r\n      (todoID: string) => dispatch(removeTodoTC(todoID)),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTodoTitle = useCallback(\r\n      (todoID: string, value: string) => dispatch(updateTodoTitleTC(todoID, value)),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeFilter = useCallback(\r\n      (todoID: string, value: FilterType) => dispatch(changeFilterTodoAC(todoID, value)),\r\n      [dispatch],\r\n   )\r\n\r\n   const addTask = useCallback(\r\n      (todoID: string, title: string) => dispatch(addTaskTC(todoID, title)),\r\n      [dispatch],\r\n   )\r\n\r\n   const removeTask = useCallback(\r\n      (todoID: string, taskID: string) => dispatch(removeTaskTC(todoID, taskID)),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTaskStatus = useCallback(\r\n      (todoID: string, taskID: string, value: TaskStatuses) =>\r\n         dispatch(updateTaskTC(todoID, taskID, {status: value})),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTaskTitle = useCallback(\r\n      (todoID: string, taskID: string, value: string) =>\r\n         dispatch(updateTaskTC(todoID, taskID, {title: value})),\r\n      [dispatch],\r\n   )\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <AppBar position=\"static\">\r\n            <Toolbar>\r\n               <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                  <MenuOutlinedIcon/>\r\n               </IconButton>\r\n               <Typography variant=\"h6\">\r\n                  Todo\r\n               </Typography>\r\n               <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n         </AppBar>\r\n\r\n         <Container fixed>\r\n            <Grid container style={{padding: '10px'}}>\r\n               <AddItemFrom addItem={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n               {\r\n                  todolists.map(todo => {\r\n                     let allTodolistTasks = tasks[todo.id]\r\n                     return <Grid item key={todo.id}>\r\n                        <Todolist todoID={todo.id}\r\n                                  title={todo.title}\r\n                                  filter={todo.filter}\r\n                                  tasks={allTodolistTasks}\r\n                                  removeTodo={removeTodo}\r\n                                  changeTodoTitle={changeTodoTitle}\r\n                                  addTask={addTask}\r\n                                  changeFilter={changeFilter}\r\n                                  changeTaskStatus={changeTaskStatus}\r\n                                  removeTask={removeTask}\r\n                                  changeTaskTitle={changeTaskTitle}/>\r\n                     </Grid>\r\n                  })\r\n               }\r\n            </Grid>\r\n         </Container>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import {ActionType} from './todolistAction'\r\nimport {TodolistType} from './todolistsType'\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionType): TodolistType[] => {\r\n   switch (action.type) {\r\n      case 'SET_TODOS':\r\n         return action.todos.map(todo => ({...todo, filter: 'all'}))\r\n      case 'ADD_TODO':\r\n         return [\r\n            {...action.todo, filter: 'all'},\r\n            ...state,\r\n         ]\r\n      case 'REMOVE_TODO':\r\n         return state.filter(t => t.id !== action.todoID)\r\n      case 'CHANGE_TITLE_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, title: action.newValue}\r\n            }\r\n            return t\r\n         })\r\n      case 'CHANGE_FILTER_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, filter: action.newValue}\r\n            }\r\n            return t\r\n         })\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {ActionType} from './taskAction'\r\nimport {TasksStateType, TasksType} from './taskType'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n   switch (action.type) {\r\n      case 'SET_TODOS':\r\n         const copyState = {...state}\r\n         action.todos.forEach(todo => {\r\n            return copyState[todo.id] = []\r\n         })\r\n         return copyState\r\n      case 'SET_TASKS':\r\n         const copyStatee = {...state}\r\n         copyStatee[action.todoID] = action.tasks\r\n         return copyStatee\r\n      case 'ADD_TASK':\r\n         const newTask: TasksType = action.task\r\n         return {\r\n            ...state,\r\n            [action.task.todoListId]: [newTask, ...state[action.task.todoListId]],\r\n         }\r\n      case 'REMOVE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].filter(t => t.id !== action.taskID),\r\n         }\r\n      case 'UPDATE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].map(t => {\r\n               if (t.id !== action.taskID) return t\r\n               return {...t, ...action.model}\r\n            }),\r\n         }\r\n      case 'ADD_TODO':\r\n         return {\r\n            ...state,\r\n            [action.todo.id]: [],\r\n         }\r\n      case 'REMOVE_TODO':\r\n         delete state[action.todoID]\r\n         return {...state}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {todolistReducer} from './todolist/todolistReducer'\r\nimport {taskReducer} from './task/taskReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n   todos: todolistReducer,\r\n   tasks: taskReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\nReactDOM.render(\r\n      <Provider store={store}>\r\n         <App/>\r\n      </Provider>,\r\n   document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"Todolist_todo__1Eyvk\",\"btnGroup\":\"Todolist_btnGroup__3u4Qu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2p58y\"};"],"sourceRoot":""}