{"version":3,"sources":["serviceWorker.ts","api/apiType.ts","api/api.ts","utils/errorUtils.ts","store/auth/authAction.ts","store/auth/authType.ts","store/app/appAction.ts","store/app/appType.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/ AddItemForm/AddItemForm.tsx","components/common/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","store/task/taskAction.ts","store/task/taskType.ts","components/Todolist/Todolist.tsx","pages/TodolistsPage/TodolistsPage.tsx","store/todolist/todolistAction.ts","store/todolist/todolistsType.ts","pages/LoginPage/Login.tsx","App.tsx","store/app/appReducer.ts","store/auth/authReducer.ts","store/todolist/todolistReducer.ts","store/task/taskReducer.ts","store/store.ts","index.tsx","components/Todolist/Todolist.module.scss","components/Task/Task.module.scss"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriority","instance","axios","create","baseURL","withCredentials","headers","todoAPI","get","title","post","todoID","delete","put","taskAPI","taskID","model","authAPI","data","handleServerAppError","dispatch","setAppStatusAC","messages","length","setAppErrorAC","handleServerNetworkError","error","message","setIsLoggedIn","value","type","status","setAppInitializedAC","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","e","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemFrom","React","memo","addItem","useState","setTitle","setError","clickAddItem","useCallback","newTitle","trim","TextField","id","label","helperText","onChange","currentTarget","onKeyPress","charCode","disabled","Tooltip","aria-label","IconButton","onClick","color","EditableSpan","changeValue","editMode","setEditMode","offMode","ctrlKey","onBlur","autoFocus","onDoubleClick","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onChangeHandler","checked","Completed","New","onClickHandler","onChangeTitle","className","styles","Checkbox","updateTaskTC","changingValue","getState","tasks","find","t","priority","startDate","deadline","description","then","res","resultCode","updateTaskAC","catch","console","warn","Todolist","addTask","filter","changeFilter","removeTodo","changeTodoTitle","useEffect","setTasksAC","items","getTasksTC","filterTasks","addTaskCallback","onClickFilter","FilterValue","removeTodoCallback","onChangeTodoTitle","filterBtnVariant","filterValue","Paper","todo","entityStatus","map","key","ButtonGroup","btnGroup","Button","TodolistsPage","todolists","todos","isLoggedIn","auth","addTodo","item","addTodoTC","setTodoEntityStatus","removeTodoAC","removeTodoTC","newValue","changeTitleTodoAC","updateTodoTitleTC","changeFilterTodoAC","addTaskTC","removeTaskAC","removeTaskTC","Grid","container","style","padding","spacing","allTodolistTasks","to","validate","values","errors","password","email","test","Login","formik","useFormik","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","App","appStatus","isInitialized","AppBar","position","Toolbar","edge","Typography","LinearProgress","top","width","Container","fixed","from","path","render","textAlign","CircularProgress","initialState","rootReducer","combineReducers","action","copyState","forEach","copyStatee","newTask","todoListId","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cc6034aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. AppWithState is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type ResponseType<T = {}> = {\r\n   resultCode: number\r\n   messages: string[]\r\n   data: T\r\n}\r\n\r\nexport type TodoAPIType = {\r\n   id: string\r\n   title: string\r\n   addedDate: string\r\n   order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n   New,\r\n   InProgress,\r\n   Completed,\r\n   Draft,\r\n}\r\n\r\nexport enum TodoTaskPriority {\r\n   Low,\r\n   Middle,\r\n   Hi,\r\n   Urgently,\r\n   Later,\r\n}\r\n\r\nexport type TaskAPIType = {\r\n   todoListId: string\r\n   id: string\r\n   title: string\r\n   description: string\r\n   addedDate: string\r\n   startDate: string\r\n   deadline: string\r\n   order: number\r\n   status: TaskStatuses\r\n   priority: TodoTaskPriority\r\n}\r\n\r\nexport type GetTasksResponseType = {\r\n   items: TaskAPIType[]\r\n   error: string | null\r\n   totalCount: number\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n   title: string\r\n   description: string\r\n   status: number\r\n   priority: number\r\n   startDate: string\r\n   deadline: string\r\n}\r\n\r\nexport type RequestLoginType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n   captcha?: boolean\r\n}\r\n","import axios from 'axios'\r\nimport {\r\n   GetTasksResponseType,\r\n   RequestLoginType,\r\n   ResponseType,\r\n   TaskAPIType,\r\n   TodoAPIType,\r\n   UpdateTaskModelType,\r\n} from './apiType'\r\n\r\nconst settings = {\r\n   withCredentials: true,\r\n   headers: {\r\n      'API-KEY': 'ec5b15d4-74e9-420d-8187-76eec8294de7',\r\n   },\r\n}\r\n\r\nconst instance = axios.create({\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n   ...settings,\r\n})\r\n\r\nexport const todoAPI = {\r\n   getTodos: () =>\r\n      instance.get<TodoAPIType[]>(`todo-lists`),\r\n   createTodo: (title: string) =>\r\n      instance.post<ResponseType<{ item: TodoAPIType }>>(`todo-lists`, {title}),\r\n   deleteTodo: (todoID: string) =>\r\n      instance.delete<ResponseType>(`todo-lists/${todoID}`),\r\n   updateTodo: (todoID: string, title: string) =>\r\n      instance.put<ResponseType>(`todo-lists/${todoID}`, {title}),\r\n}\r\n\r\nexport const taskAPI = {\r\n   getTasks: (todoID: string) =>\r\n      instance.get<GetTasksResponseType>(`todo-lists/${todoID}/tasks`),\r\n   createTask: (todoID: string, title: string) =>\r\n      instance.post<ResponseType<{ item: TaskAPIType }>>(`todo-lists/${todoID}/tasks`, {title}),\r\n   deleteTask: (todoID: string, taskID: string) =>\r\n      instance.delete<ResponseType>(`todo-lists/${todoID}/tasks/${taskID}`),\r\n   updateTask: (todoID: string, taskID: string, model: UpdateTaskModelType) =>\r\n      instance.put<ResponseType<{ item: TaskAPIType }>>(`todo-lists/${todoID}/tasks/${taskID}`, model),\r\n}\r\n\r\nexport const authAPI = {\r\n   getMe: () =>\r\n      instance.get<ResponseType<{ id: number, email: string, login: string }>>(`/auth/me`),\r\n   login: (data: RequestLoginType) =>\r\n      instance.post<ResponseType<{ userId: number }>>(`/auth/login`, data),\r\n   logout: () =>\r\n      instance.delete<ResponseType>(`/auth/login`),\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../store/app/appAction'\r\nimport {Dispatch} from 'redux'\r\nimport {ResponseType} from '../api/apiType'\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(setAppStatusAC('failed'))\r\n   if (data.messages && data.messages.length) {\r\n      dispatch(setAppErrorAC(data.messages[0]))\r\n   } else {\r\n      dispatch(setAppErrorAC('Oops, some error occurred'))\r\n   }\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(setAppErrorAC(error.message))\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\r\n","import {LOGIN_SET_IS_LOGGED_IN} from './authType'\r\nimport {Dispatch} from 'redux'\r\nimport {authAPI} from '../../api/api'\r\nimport {setAppStatusAC} from '../app/appAction'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/errorUtils'\r\nimport {RequestLoginType} from '../../api/apiType'\r\n\r\n// actions =============================================================================================================\r\n\r\nexport const setIsLoggedIn = (value: boolean) => ({type: LOGIN_SET_IS_LOGGED_IN, value} as const)\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>\r\n\r\nexport type ActionType\r\n   = SetIsLoggedInActionType\r\n\r\n//thunks ===============================================================================================================\r\n\r\nexport const loginTC = (data: RequestLoginType) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      authAPI.login(data)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(setAppStatusAC('succeeded'))\r\n               dispatch(setIsLoggedIn(true))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n\r\nexport const logoutTC = () =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      authAPI.logout()\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(setIsLoggedIn(false))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n","export const LOGIN_SET_IS_LOGGED_IN = 'LOGIN/SET_IS_LOGGED_IN'\r\n\r\nexport type authStateType = {\r\n   isLoggedIn: boolean\r\n}\r\n","import {APP_SET_ERROR, APP_SET_INITIALIZED, APP_SET_STATUS, RequestStatusType} from './appType'\r\nimport {authAPI} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {setIsLoggedIn} from '../auth/authAction'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/errorUtils'\r\n\r\n// actions =============================================================================================================\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: APP_SET_STATUS, status} as const)\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppErrorAC = (error: null | string) => ({type: APP_SET_ERROR, error} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport const setAppInitializedAC = (value: boolean) => ({type: APP_SET_INITIALIZED, value} as const)\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\nexport type ActionType\r\n   = SetAppStatusActionType\r\n   | SetAppErrorActionType\r\n   | SetAppInitializedActionType\r\n\r\n// thunks ==============================================================================================================\r\n\r\nexport const initializeAppTC = () =>\r\n   (dispatch: Dispatch) => {\r\n      authAPI.getMe()\r\n         .then(res => {\r\n            dispatch(setAppInitializedAC(true))\r\n            dispatch(setAppStatusAC('loading'))\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(setIsLoggedIn(true))\r\n            } else {\r\n               dispatch(setAppStatusAC('failed'))\r\n            }\r\n         })\r\n         .catch(error => {\r\n            dispatch(setAppInitializedAC(true))\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n","export const APP_SET_STATUS = 'APP/SET_STATUS'\r\nexport const APP_SET_ERROR = 'APP/SET_ERROR'\r\nexport const APP_SET_INITIALIZED = 'APP/SET_INITIALIZED'\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppStateType = {\r\n   status: RequestStatusType\r\n   error: null | string\r\n   isInitialized: boolean\r\n}\r\n","import React from 'react'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {Snackbar} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {setAppErrorAC} from '../../store/app/appAction'\r\n\r\nconst Alert = (props: AlertProps) => <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n\r\nexport const ErrorSnackbar = () => {\r\n   const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n   const dispatch = useDispatch()\r\n\r\n   const handleClose = (e?: React.SyntheticEvent, reason?: string) => {\r\n      if (reason === 'clickaway') {\r\n         return\r\n      }\r\n      dispatch(setAppErrorAC(null))\r\n   }\r\n\r\n   return (\r\n      <Snackbar open={error !== null} autoHideDuration={10000} onClose={handleClose}>\r\n         <Alert onClose={handleClose} severity={'error'}>\r\n            {error}\r\n         </Alert>\r\n      </Snackbar>\r\n   )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport {TextField} from '@material-ui/core'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\ntype AddItemFromPropsType = {\r\n   addItem: (title: string) => void\r\n   disabled?: boolean\r\n}\r\n\r\nconst AddItemFrom = React.memo(\r\n   (props: AddItemFromPropsType) => {\r\n\r\n      const {addItem} = props\r\n\r\n      const [title, setTitle] = useState<string>('')\r\n      const [error, setError] = useState<string | null>(null)\r\n\r\n      const clickAddItem = useCallback(\r\n         () => {\r\n            let newTitle = title.trim()\r\n            if (newTitle) {\r\n               addItem(newTitle)\r\n               setTitle('')\r\n            } else {\r\n               setError('Title is required')\r\n            }\r\n         },\r\n         [title, addItem],\r\n      )\r\n\r\n      const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n         setTitle(e.currentTarget.value)\r\n      }\r\n\r\n      const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n         if (error) {\r\n            setError(null)\r\n         }\r\n         if (e.charCode === 13) {\r\n            clickAddItem()\r\n         }\r\n      }\r\n\r\n      return (\r\n         <div>\r\n            <TextField id=\"outlined-basic\"\r\n                       label=\"Title\"\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onPressEnter}\r\n                       disabled={props.disabled}/>\r\n            <Tooltip title={'Add'} aria-label=\"add\">\r\n               <IconButton aria-label=\"delete\" onClick={clickAddItem}\r\n                           disabled={props.disabled}>\r\n                  <AddIcon color=\"action\"/>\r\n               </IconButton>\r\n            </Tooltip>\r\n         </div>\r\n      )\r\n   },\r\n)\r\nexport default AddItemFrom\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n   value: string\r\n   changeValue: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo(\r\n   (props: EditableSpanPropsType) => {\r\n\r\n      const {value, changeValue} = props\r\n\r\n      const [editMode, setEditMode] = useState<boolean>(false)\r\n      const [title, setTitle] = useState<string>(props.value)\r\n\r\n      const onMode = () => setEditMode(true)\r\n      const offMode = useCallback(\r\n         () => {\r\n            setEditMode(false)\r\n            !title.trim()\r\n               ? changeValue(value)\r\n               : changeValue(title)\r\n         },\r\n         [changeValue, value, title],\r\n      )\r\n\r\n      const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n      const onCtrlEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n         if (e.ctrlKey && e.charCode === 13) {\r\n            offMode()\r\n         }\r\n      }\r\n\r\n      return (\r\n         <>\r\n            {\r\n               editMode\r\n                  ? <TextField value={title}\r\n                               onChange={changeTitle}\r\n                               onKeyPress={onCtrlEnter}\r\n                               onBlur={offMode}\r\n                               autoFocus/>\r\n                  : <span onDoubleClick={onMode}>{props.value}</span>\r\n            }\r\n         </>\r\n      )\r\n   },\r\n)\r\nexport default EditableSpan\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {TasksType} from '../../store/task/taskType'\r\nimport styles from './Task.module.scss'\r\nimport {Checkbox} from '@material-ui/core'\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport {TaskStatuses} from '../../api/apiType'\r\n\r\ntype TaskPropsType = {\r\n   todoID: string\r\n   task: TasksType\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: TaskStatuses) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n}\r\n\r\nconst Task = React.memo(\r\n   (props: TaskPropsType) => {\r\n\r\n      const {todoID, task, removeTask, changeTaskStatus, changeTaskTitle} = props\r\n\r\n      const onChangeHandler = useCallback(\r\n         (e: ChangeEvent<HTMLInputElement>) => {\r\n            const status: TaskStatuses = (e.currentTarget.checked) ? TaskStatuses.Completed : TaskStatuses.New\r\n            changeTaskStatus(todoID, task.id, status)\r\n         },\r\n         [todoID, task.id, changeTaskStatus],\r\n      )\r\n\r\n      const onClickHandler = useCallback(\r\n         () => removeTask(todoID, task.id),\r\n         [todoID, task.id, removeTask],\r\n      )\r\n\r\n      const onChangeTitle = useCallback(\r\n         (title: string) => changeTaskTitle(todoID, task.id, title),\r\n         [todoID, task.id, changeTaskTitle],\r\n      )\r\n\r\n      return <div className={styles.task}>\r\n         <Checkbox\r\n            color=\"primary\"\r\n            checked={task.status === TaskStatuses.Completed} onChange={onChangeHandler}\r\n         />\r\n         <EditableSpan value={task.title} changeValue={onChangeTitle}/>\r\n         <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n            <DeleteIcon color=\"action\"/>\r\n         </IconButton>\r\n      </div>\r\n   },\r\n)\r\n\r\nexport default Task\r\n","import {ADD_TASK, REMOVE_TASK, SET_TASKS, UPDATE_TASK} from './taskType'\r\nimport {AddTodoActionType, RemoveTodoActionType, SetTodosActionType} from '../todolist/todolistAction'\r\nimport {TaskAPIType, UpdateTaskModelType} from '../../api/apiType'\r\nimport {Dispatch} from 'redux'\r\nimport {taskAPI} from '../../api/api'\r\nimport {AppRootStateType} from '../store'\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/appAction'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/errorUtils'\r\n\r\n// actions =============================================================================================================\r\n\r\ntype AddTaskActionType = { type: typeof ADD_TASK, task: TaskAPIType }\r\nexport const addTaskAC = (task: TaskAPIType): AddTaskActionType => ({\r\n   type: ADD_TASK,\r\n   task,\r\n})\r\n\r\ntype RemoveTaskActionType = { type: typeof REMOVE_TASK, todoID: string, taskID: string }\r\nexport const removeTaskAC = (todoID: string, taskID: string): RemoveTaskActionType => ({\r\n   type: REMOVE_TASK,\r\n   todoID,\r\n   taskID,\r\n})\r\n\r\ntype UpdateTaskActionType = { type: typeof UPDATE_TASK, todoID: string, taskID: string, model: UpdateTaskModelType }\r\nexport const updateTaskAC = (todoID: string, taskID: string, model: UpdateTaskModelType): UpdateTaskActionType => ({\r\n   type: UPDATE_TASK,\r\n   todoID,\r\n   taskID,\r\n   model,\r\n})\r\n\r\ntype SetTasksActionType = { type: typeof SET_TASKS, todoID: string, tasks: TaskAPIType[] }\r\nexport const setTasksAC = (todoID: string, tasks: TaskAPIType[]): SetTasksActionType => ({\r\n   type: SET_TASKS,\r\n   todoID,\r\n   tasks,\r\n})\r\n\r\nexport type ActionType\r\n   = AddTaskActionType\r\n   | RemoveTaskActionType\r\n   | UpdateTaskActionType\r\n   | AddTodoActionType\r\n   | RemoveTodoActionType\r\n   | SetTodosActionType\r\n   | SetTasksActionType\r\n\r\n// thunks ==============================================================================================================\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n   title?: string\r\n   description?: string\r\n   status?: number\r\n   priority?: number\r\n   startDate?: string\r\n   deadline?: string\r\n}\r\n\r\nexport const getTasksTC = (todoID: string) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      taskAPI.getTasks(todoID)\r\n         .then(res => {\r\n            if (!res.data.error) {\r\n               dispatch(setTasksAC(todoID, res.data.items))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               if (res.data.error) {\r\n                  dispatch(setAppErrorAC(res.data.error))\r\n               } else {\r\n                  dispatch(setAppErrorAC('Oops, some error occurred'))\r\n               }\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n\r\nexport const addTaskTC = (todoID: string, title: string) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      taskAPI.createTask(todoID, title)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(addTaskAC(res.data.data.item))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerAppError(error, dispatch)\r\n         })\r\n   }\r\n\r\nexport const removeTaskTC = (todoID: string, taskID: string) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      taskAPI.deleteTask(todoID, taskID)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(removeTaskAC(todoID, taskID))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n\r\nexport const updateTaskTC = (todoID: string, taskID: string, changingValue: UpdateDomainTaskModelType) =>\r\n   (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n      const task = getState().tasks[todoID].find(t => t.id === taskID)\r\n      if (!task) {\r\n         console.warn('task not found in the state')\r\n         return\r\n      }\r\n      const model: UpdateTaskModelType = {\r\n         title: task.title,\r\n         status: task.status,\r\n         priority: task.priority,\r\n         startDate: task.startDate,\r\n         deadline: task.deadline,\r\n         description: task.description,\r\n         ...changingValue,\r\n      }\r\n      dispatch(setAppStatusAC('loading'))\r\n      taskAPI.updateTask(todoID, taskID, model)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(updateTaskAC(todoID, taskID, model))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerAppError(error, dispatch)\r\n         })\r\n   }\r\n","import {TaskAPIType} from '../../api/apiType'\r\n\r\nexport const ADD_TASK = 'ADD_TASK'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const UPDATE_TASK = 'UPDATE_TASK'\r\nexport const SET_TASKS = 'SET_TASKS'\r\n\r\nexport type TasksType = TaskAPIType\r\n\r\nexport type TasksStateType = {\r\n   [key: string]: TasksType[]\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport AddItemFrom from '../ AddItemForm/AddItemForm'\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport Button from '@material-ui/core/Button'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport styles from './Todolist.module.scss'\r\nimport {TasksType} from '../../store/task/taskType'\r\nimport {EntityStatusType, FilterType} from '../../store/todolist/todolistsType'\r\nimport Task from '../Task/Task'\r\nimport {TaskStatuses} from '../../api/apiType'\r\nimport {useDispatch} from 'react-redux'\r\nimport {getTasksTC} from '../../store/task/taskAction'\r\n\r\ntype TodolistPropsType = {\r\n   todoID: string\r\n   entityStatus: EntityStatusType\r\n   title: string\r\n   filter: FilterType\r\n   tasks: TasksType[]\r\n   removeTodo: (todoID: string) => void\r\n   changeTodoTitle: (todoID: string, value: string) => void\r\n   changeFilter: (todoID: string, filter: FilterType) => void\r\n   addTask: (todoID: string, title: string) => void\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: TaskStatuses) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n}\r\n\r\nconst Todolist = React.memo(\r\n   (props: TodolistPropsType) => {\r\n\r\n      const {todoID, addTask, filter, changeFilter, removeTodo, changeTodoTitle} = props\r\n      const dispatch = useDispatch()\r\n\r\n      useEffect(\r\n         () => {\r\n            dispatch(getTasksTC(todoID))\r\n         }, []\r\n      )\r\n\r\n      const addTaskCallback = useCallback(\r\n         (title: string) => addTask(todoID, title),\r\n         [todoID, addTask],\r\n      )\r\n\r\n      const onClickFilter = useCallback(\r\n         (FilterValue: FilterType) => changeFilter(todoID, FilterValue),\r\n         [todoID, changeFilter],\r\n      )\r\n\r\n      const removeTodoCallback = useCallback(\r\n         () => removeTodo(todoID),\r\n         [todoID, removeTodo],\r\n      )\r\n\r\n      const onChangeTodoTitle = useCallback(\r\n         (value: string) => changeTodoTitle(todoID, value),\r\n         [todoID, changeTodoTitle],\r\n      )\r\n\r\n      const filterBtnVariant = useCallback(\r\n         (filterValue: FilterType) => filter === filterValue ? 'contained' : 'outlined',\r\n         [filter],\r\n      )\r\n\r\n      let filterTasks\r\n      switch (filter) {\r\n         case 'active':\r\n            filterTasks = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            break\r\n         case 'completed':\r\n            filterTasks = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            break\r\n         default:\r\n            filterTasks = props.tasks\r\n      }\r\n\r\n      return (\r\n         <Paper elevation={3} variant=\"outlined\" className={styles.todo}>\r\n            <h3>\r\n               <EditableSpan value={props.title} changeValue={onChangeTodoTitle}/>\r\n               <IconButton aria-label=\"delete\" onClick={removeTodoCallback} disabled={props.entityStatus === 'loading'}>\r\n                  <DeleteIcon color=\"action\"/>\r\n               </IconButton>\r\n            </h3>\r\n            <div>\r\n               <AddItemFrom addItem={addTaskCallback} disabled={props.entityStatus === 'loading'}/>\r\n            </div>\r\n            {\r\n               filterTasks.map(t => {\r\n                  return <Task key={t.id} todoID={props.todoID}\r\n                               task={t}\r\n                               removeTask={props.removeTask}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               changeTaskTitle={props.changeTaskTitle}/>\r\n               })\r\n            }\r\n            <div>\r\n               <ButtonGroup color=\"primary\" aria-label=\"filter button group\" className={styles.btnGroup}>\r\n                  <Button onClick={() => onClickFilter('all')}\r\n                          variant={filterBtnVariant('all')}>All</Button>\r\n                  <Button onClick={() => onClickFilter('active')}\r\n                          variant={filterBtnVariant('active')}>Active</Button>\r\n                  <Button onClick={() => onClickFilter('completed')}\r\n                          variant={filterBtnVariant('completed')}>Completed</Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </Paper>\r\n      )\r\n   },\r\n)\r\n\r\nexport default Todolist\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport AddItemFrom from '../../components/ AddItemForm/AddItemForm'\r\nimport Todolist from '../../components/Todolist/Todolist'\r\nimport {\r\n   addTodoTC,\r\n   changeFilterTodoAC,\r\n   getTodosTC,\r\n   removeTodoTC,\r\n   updateTodoTitleTC,\r\n} from '../../store/todolist/todolistAction'\r\nimport {FilterType, TodolistType} from '../../store/todolist/todolistsType'\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from '../../store/task/taskAction'\r\nimport {TaskStatuses} from '../../api/apiType'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {TasksStateType} from '../../store/task/taskType'\r\n\r\nconst TodolistsPage: React.FC = () => {\r\n   const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todos)\r\n   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(\r\n      () => {\r\n         if (!isLoggedIn) {\r\n            return\r\n         }\r\n         dispatch(getTodosTC())\r\n      }, []\r\n   )\r\n\r\n   const addTodo = useCallback(\r\n      (title: string) => dispatch(addTodoTC(title)),\r\n      [dispatch],\r\n   )\r\n\r\n   const removeTodo = useCallback(\r\n      (todoID: string) => dispatch(removeTodoTC(todoID)),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTodoTitle = useCallback(\r\n      (todoID: string, value: string) => dispatch(updateTodoTitleTC(todoID, value)),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeFilter = useCallback(\r\n      (todoID: string, value: FilterType) => dispatch(changeFilterTodoAC(todoID, value)),\r\n      [dispatch],\r\n   )\r\n\r\n   const addTask = useCallback(\r\n      (todoID: string, title: string) => dispatch(addTaskTC(todoID, title)),\r\n      [dispatch],\r\n   )\r\n\r\n   const removeTask = useCallback(\r\n      (todoID: string, taskID: string) => dispatch(removeTaskTC(todoID, taskID)),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTaskStatus = useCallback(\r\n      (todoID: string, taskID: string, value: TaskStatuses) =>\r\n         dispatch(updateTaskTC(todoID, taskID, {status: value})),\r\n      [dispatch],\r\n   )\r\n\r\n   const changeTaskTitle = useCallback(\r\n      (todoID: string, taskID: string, value: string) =>\r\n         dispatch(updateTaskTC(todoID, taskID, {title: value})),\r\n      [dispatch],\r\n   )\r\n\r\n   if(!isLoggedIn) {\r\n      return <Redirect to={'/login'}/>\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Grid container style={{padding: '10px'}}>\r\n            <AddItemFrom addItem={addTodo}/>\r\n         </Grid>\r\n         <Grid container spacing={3}>\r\n            {\r\n               todolists.map(todo => {\r\n                  let allTodolistTasks = tasks[todo.id]\r\n                  return <Grid item key={todo.id}>\r\n                     <Todolist todoID={todo.id}\r\n                               entityStatus={todo.entityStatus}\r\n                               title={todo.title}\r\n                               filter={todo.filter}\r\n                               tasks={allTodolistTasks}\r\n                               removeTodo={removeTodo}\r\n                               changeTodoTitle={changeTodoTitle}\r\n                               addTask={addTask}\r\n                               changeFilter={changeFilter}\r\n                               changeTaskStatus={changeTaskStatus}\r\n                               removeTask={removeTask}\r\n                               changeTaskTitle={changeTaskTitle}/>\r\n                  </Grid>\r\n               })\r\n            }\r\n         </Grid>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default TodolistsPage\r\n","import {\r\n   ADD_TODO,\r\n   CHANGE_FILTER_TODO,\r\n   CHANGE_TITLE_TODO,\r\n   EntityStatusType,\r\n   FilterType,\r\n   REMOVE_TODO, SET_ENTITE_STATUS,\r\n   SET_TODOS,\r\n} from './todolistsType'\r\nimport {TodoAPIType} from '../../api/apiType'\r\nimport {Dispatch} from 'redux'\r\nimport {todoAPI} from '../../api/api'\r\nimport {setAppStatusAC} from '../app/appAction'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/errorUtils'\r\n\r\n// actions =============================================================================================================\r\n\r\nexport type AddTodoActionType = { type: typeof ADD_TODO, todo: TodoAPIType }\r\nexport const addTodoAC = (todo: TodoAPIType): AddTodoActionType => ({\r\n   type: ADD_TODO,\r\n   todo,\r\n})\r\n\r\nexport type RemoveTodoActionType = { type: typeof REMOVE_TODO, todoID: string }\r\nexport const removeTodoAC = (todoID: string): RemoveTodoActionType => ({\r\n   type: REMOVE_TODO,\r\n   todoID,\r\n})\r\n\r\ntype ChangeTitleTodoActionType = { type: typeof CHANGE_TITLE_TODO, todoID: string, newValue: string }\r\nexport const changeTitleTodoAC = (todoID: string, newValue: string): ChangeTitleTodoActionType => ({\r\n   type: CHANGE_TITLE_TODO,\r\n   todoID,\r\n   newValue,\r\n})\r\n\r\ntype ChangeFilterTodoActionType = { type: typeof CHANGE_FILTER_TODO, todoID: string, newValue: FilterType }\r\nexport const changeFilterTodoAC = (todoID: string, newValue: FilterType): ChangeFilterTodoActionType => ({\r\n   type: CHANGE_FILTER_TODO,\r\n   todoID,\r\n   newValue,\r\n})\r\n\r\nexport type SetTodosActionType = { type: typeof SET_TODOS, todos: TodoAPIType[] }\r\nexport const setTodosAC = (todos: TodoAPIType[]): SetTodosActionType => ({\r\n   type: SET_TODOS,\r\n   todos,\r\n})\r\n\r\nexport const setTodoEntityStatus = (todoID: string, status: EntityStatusType) => ({type: SET_ENTITE_STATUS, todoID, status} as const)\r\ntype SetTodoEntityStatusActionType = ReturnType<typeof setTodoEntityStatus>\r\n\r\nexport type ActionType\r\n   = AddTodoActionType\r\n   | RemoveTodoActionType\r\n   | ChangeTitleTodoActionType\r\n   | ChangeFilterTodoActionType\r\n   | SetTodosActionType\r\n   | SetTodoEntityStatusActionType\r\n\r\n// thunks ==============================================================================================================\r\n\r\nexport const getTodosTC = () => (dispatch: Dispatch) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   todoAPI.getTodos()\r\n      .then(res => {\r\n         dispatch(setTodosAC(res.data))\r\n         dispatch(setAppStatusAC('succeeded'))\r\n      })\r\n      .catch(error => {\r\n         handleServerNetworkError(error, dispatch)\r\n      })\r\n}\r\n\r\nexport const addTodoTC = (title: string) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      todoAPI.createTodo(title)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(addTodoAC(res.data.data.item))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n\r\nexport const removeTodoTC = (todoID: string) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      dispatch(setTodoEntityStatus(todoID, 'loading'))\r\n      todoAPI.deleteTodo(todoID)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(removeTodoAC(todoID))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n\r\nexport const updateTodoTitleTC = (todoID: string, title: string) =>\r\n   (dispatch: Dispatch) => {\r\n      dispatch(setAppStatusAC('loading'))\r\n      todoAPI.updateTodo(todoID, title)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               dispatch(changeTitleTodoAC(todoID, title))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n               handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n         .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n         })\r\n   }\r\n","import {TodoAPIType} from '../../api/apiType'\r\n\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const REMOVE_TODO = 'REMOVE_TODO'\r\nexport const CHANGE_TITLE_TODO = 'CHANGE_TITLE_TODO'\r\nexport const CHANGE_FILTER_TODO = 'CHANGE_FILTER_TODO'\r\nexport const SET_TODOS = 'SET_TODOS'\r\nexport const SET_ENTITE_STATUS = 'TODO/SET_ENTITE_STATUS'\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type EntityStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type TodolistType = TodoAPIType & { filter: FilterType, entityStatus: EntityStatusType }\r\n","import React from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Button from '@material-ui/core/Button'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {useFormik} from 'formik'\r\nimport {RequestLoginType} from '../../api/apiType'\r\nimport {loginTC} from '../../store/auth/authAction'\r\n\r\nconst validate = (values: RequestLoginType) => {\r\n   const errors: any = {}\r\n\r\n   if (!values.password) {\r\n      errors.password = 'Required'\r\n   }\r\n\r\n   if (!values.email) {\r\n      errors.email = 'Required'\r\n   } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n      errors.email = 'Invalid email address'\r\n   }\r\n\r\n   return errors\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n   const dispatch = useDispatch()\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false,\r\n      },\r\n      validate,\r\n      onSubmit: values => {\r\n         // alert(JSON.stringify(values, null, 2))\r\n         dispatch(loginTC(values))\r\n      },\r\n   })\r\n\r\n   if(isLoggedIn) {\r\n      return <Redirect to={'/todo'}/>\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n               <form onSubmit={formik.handleSubmit}>\r\n                  <FormControl>\r\n                     <FormLabel>\r\n                        <p>To log in get registered {' '}\r\n                           <a href={'https://social-network.samuraijs.com/'}\r\n                              target={'_blank'}>here\r\n                           </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                     </FormLabel>\r\n                     <FormGroup>\r\n                        <TextField\r\n                           label=\"Email\"\r\n                           margin=\"normal\"\r\n                           error={!!formik.errors.email}\r\n                           helperText={formik.errors.email}\r\n                           {...formik.getFieldProps('email')}\r\n                        />\r\n                        <TextField\r\n                           type=\"password\"\r\n                           label=\"Password\"\r\n                           margin=\"normal\"\r\n                           error={!!formik.errors.password}\r\n                           helperText={formik.errors.password}\r\n                           {...formik.getFieldProps('password')}\r\n                        />\r\n                        <FormControlLabel\r\n                           label={'Remember me'}\r\n                           control={<Checkbox/>}\r\n                           {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                     </FormGroup>\r\n                  </FormControl>\r\n               </form>\r\n            </Grid>\r\n         </Grid>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Login\r\n","import React, {useEffect} from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport './App.css'\r\nimport {AppBar} from '@material-ui/core'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport MenuOutlinedIcon from '@material-ui/icons/MenuOutlined'\r\nimport Container from '@material-ui/core/Container'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store/store'\r\nimport {RequestStatusType} from './store/app/appType'\r\nimport {ErrorSnackbar} from './components/ErrorSnackbar/ErrorSnackbar'\r\nimport TodolistsPage from './pages/TodolistsPage/TodolistsPage'\r\nimport Login from './pages/LoginPage/Login'\r\nimport {initializeAppTC} from './store/app/appAction'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport {logoutTC} from './store/auth/authAction'\r\n\r\nfunction App() {\r\n   const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n   const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(() => {\r\n      dispatch(initializeAppTC())\r\n   }, [])\r\n\r\n   const logoutHandler = () => {\r\n      dispatch(logoutTC())\r\n   }\r\n\r\n   if (!isInitialized) {\r\n      return <div\r\n         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n         <CircularProgress/>\r\n      </div>\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <AppBar position=\"static\">\r\n            <Toolbar>\r\n               <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                  <MenuOutlinedIcon/>\r\n               </IconButton>\r\n               <Typography variant=\"h6\">\r\n                  Todo\r\n               </Typography>\r\n               {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n            </Toolbar>\r\n            {appStatus === 'loading' && <LinearProgress style={{position: 'absolute', top: '0', width: '100%'}}/>}\r\n         </AppBar>\r\n\r\n         <Container fixed>\r\n            <Redirect from={'/'} to={'/todo'}/>\r\n            <Route path={'/todo'} render={() => <TodolistsPage/>}/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n         </Container>\r\n\r\n         <ErrorSnackbar/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import {AppStateType} from './appType'\r\nimport {ActionType} from './appAction'\r\n\r\nconst initialState: AppStateType = {\r\n   status: 'idle',\r\n   error: null,\r\n   isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: ActionType): AppStateType => {\r\n   switch (action.type) {\r\n      case 'APP/SET_STATUS':\r\n         return {...state, status: action.status}\r\n      case 'APP/SET_ERROR':\r\n         return {...state, error: action.error}\r\n      case 'APP/SET_INITIALIZED':\r\n         return {...state, isInitialized: action.value}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {authStateType} from './authType'\r\nimport {ActionType} from './authAction'\r\n\r\nconst initialState: authStateType = {\r\n   isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionType): authStateType => {\r\n   switch (action.type) {\r\n      case 'LOGIN/SET_IS_LOGGED_IN':\r\n         return {...state, isLoggedIn: action.value}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {ActionType} from './todolistAction'\r\nimport {TodolistType} from './todolistsType'\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionType): TodolistType[] => {\r\n   switch (action.type) {\r\n      case 'SET_TODOS':\r\n         return action.todos.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n      case 'ADD_TODO':\r\n         return [\r\n            {...action.todo, filter: 'all', entityStatus: 'idle'},\r\n            ...state,\r\n         ]\r\n      case 'REMOVE_TODO':\r\n         return state.filter(t => t.id !== action.todoID)\r\n      case 'CHANGE_TITLE_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, title: action.newValue}\r\n            }\r\n            return t\r\n         })\r\n      case 'CHANGE_FILTER_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, filter: action.newValue}\r\n            }\r\n            return t\r\n         })\r\n      case 'TODO/SET_ENTITE_STATUS':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               return {...t, entityStatus: action.status}\r\n            }\r\n            return t\r\n         })\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {ActionType} from './taskAction'\r\nimport {TasksStateType, TasksType} from './taskType'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n   switch (action.type) {\r\n      case 'SET_TODOS':\r\n         const copyState = {...state}\r\n         action.todos.forEach(todo => {\r\n            return copyState[todo.id] = []\r\n         })\r\n         return copyState\r\n      case 'SET_TASKS':\r\n         const copyStatee = {...state}\r\n         copyStatee[action.todoID] = action.tasks\r\n         return copyStatee\r\n      case 'ADD_TASK':\r\n         const newTask: TasksType = action.task\r\n         return {\r\n            ...state,\r\n            [action.task.todoListId]: [newTask, ...state[action.task.todoListId]],\r\n         }\r\n      case 'REMOVE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].filter(t => t.id !== action.taskID),\r\n         }\r\n      case 'UPDATE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: state[action.todoID].map(t => {\r\n               if (t.id !== action.taskID) return t\r\n               return {...t, ...action.model}\r\n            }),\r\n         }\r\n      case 'ADD_TODO':\r\n         return {\r\n            ...state,\r\n            [action.todo.id]: [],\r\n         }\r\n      case 'REMOVE_TODO':\r\n         delete state[action.todoID]\r\n         return {...state}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from './app/appReducer'\r\nimport {authReducer} from './auth/authReducer'\r\nimport {todolistReducer} from './todolist/todolistReducer'\r\nimport {taskReducer} from './task/taskReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n   app: appReducer,\r\n   auth: authReducer,\r\n   todos: todolistReducer,\r\n   tasks: taskReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './App'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './store/store'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <BrowserRouter>\r\n         <App/>\r\n      </BrowserRouter>\r\n   </Provider>,\r\n   document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"Todolist_todo__1Eyvk\",\"btnGroup\":\"Todolist_btnGroup__3u4Qu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2p58y\"};"],"sourceRoot":""}