{"version":3,"sources":["components/Todolist/Todolist.module.scss","serviceWorker.ts","components/ AddItemForm/AddItemForm.tsx","components/common/EditableSpan/EditableSpan.tsx","components/Todolist/Todolist.tsx","App.tsx","store/todolist/todolistAction.ts","store/todolist/todolistsType.ts","store/task/taskAction.ts","store/task/taskType.ts","store/todolist/todolistReducer.ts","store/task/taskReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemFrom","props","useState","title","setTitle","error","setError","addItem","trim","TextField","id","label","variant","value","helperText","onChange","e","currentTarget","onKeyPress","key","Tooltip","aria-label","IconButton","onClick","color","EditableSpan","editMode","setEditMode","offMode","changeValue","ctrlKey","charCode","onBlur","autoFocus","onDoubleClick","Todolist","onClickFilter","FilterValue","changeFilter","todoID","filterBtnVariant","filterValue","filter","Paper","elevation","className","styles","todo","changeTodoTitle","removeTodo","addTask","tasks","map","t","task","Checkbox","checked","isDone","changeTaskStatus","changeTaskTitle","removeTask","ButtonGroup","Button","App","todolists","useSelector","state","dispatch","useDispatch","type","todoACs","newValue","taskACs","taskID","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","style","padding","v1","spacing","filterTasks","item","initialState","rootReducer","combineReducers","action","newTask","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ae266f5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"Todolist_todo__1Eyvk\",\"task\":\"Todolist_task__21P1O\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. AppWithState is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {TextField} from '@material-ui/core';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\ntype AddItemFromPropsType = {\r\n   addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemFrom(props: AddItemFromPropsType) {\r\n\r\n   const [title, setTitle] = useState<string>('')\r\n   const [error, setError] = useState<string | null>(null)\r\n\r\n   const addItem = () => {\r\n      if (title.trim()) {\r\n         props.addItem(title)\r\n      } else {\r\n         setError('Empty field')\r\n      }\r\n      setTitle('')\r\n   }\r\n\r\n   const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n      setError(null)\r\n   }\r\n\r\n   const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Enter') {\r\n         addItem()\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <TextField id=\"outlined-basic\"\r\n                    label=\"Title\"\r\n                    variant=\"outlined\"\r\n                    value={title}\r\n                    error={!!error}\r\n                    helperText={error}\r\n                    onChange={changeTitle}\r\n                    onKeyPress={onPressEnter}/>\r\n         <Tooltip title={'Add'} aria-label=\"add\">\r\n            <IconButton aria-label=\"delete\" onClick={addItem}>\r\n               <AddIcon color=\"action\"/>\r\n            </IconButton>\r\n         </Tooltip>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default AddItemFrom\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n   value: string\r\n   changeValue: (value: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n\r\n   const [editMode, setEditMode] = useState<boolean>(false)\r\n   const [title, setTitle] = useState<string>(props.value)\r\n\r\n   const onMode = () => setEditMode(true)\r\n   const offMode = () => {\r\n      setEditMode(false)\r\n      props.changeValue(title)\r\n   }\r\n\r\n   const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n   const onCtrlEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.ctrlKey && e.charCode === 13) {\r\n         offMode()\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {\r\n            editMode\r\n               ? <TextField value={title}\r\n                            onChange={changeTitle}\r\n                            onKeyPress={onCtrlEnter}\r\n                            onBlur={offMode}\r\n                            autoFocus/>\r\n               : <span onDoubleClick={onMode}>{props.value}</span>\r\n         }\r\n      </>\r\n   )\r\n}\r\n\r\nexport default EditableSpan\r\n","import React, {ChangeEvent} from 'react';\r\nimport AddItemFrom from '../ AddItemForm/AddItemForm';\r\nimport EditableSpan from '../common/EditableSpan/EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport {Checkbox} from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from './Todolist.module.scss';\r\nimport {TasksType} from '../../store/task/taskType';\r\nimport {FilterType} from '../../store/todolist/todolistsType';\r\n\r\ntype TodolistPropsType = {\r\n   todoID: string\r\n   title: string\r\n   tasks: TasksType[]\r\n   filter: FilterType\r\n   removeTodo: (todoID: string) => void\r\n   changeTodoTitle: (todoID: string, value: string) => void\r\n   removeTask: (todoID: string, tasksID: string) => void\r\n   addTask: (todoID: string, title: string) => void\r\n   changeTaskStatus: (todoID: string, taskID: string, value: boolean) => void\r\n   changeTaskTitle: (todoID: string, taskID: string, value: string) => void\r\n   changeFilter: (todoID: string, filter: FilterType) => void\r\n}\r\n\r\nfunction Todolist(props: TodolistPropsType) {\r\n\r\n   const addTask = (title: string) => {\r\n      props.addTask(props.todoID, title)\r\n   }\r\n\r\n   const onClickFilter = (FilterValue: FilterType) => {\r\n      props.changeFilter(props.todoID, FilterValue)\r\n   }\r\n\r\n   const filterBtnVariant = (filterValue: FilterType) => {\r\n      return props.filter === filterValue ? 'contained' : 'outlined'\r\n   }\r\n\r\n   const removeTodo = () => props.removeTodo(props.todoID)\r\n\r\n   const onChangeTodoTitle = (value: string) => {\r\n      props.changeTodoTitle(props.todoID, value)\r\n   }\r\n\r\n   return (\r\n      <Paper elevation={3} variant=\"outlined\" className={styles.todo}>\r\n         <h3><EditableSpan value={props.title} changeValue={onChangeTodoTitle}/>\r\n            <IconButton aria-label=\"delete\" onClick={removeTodo}>\r\n               <DeleteIcon color=\"action\"/>\r\n            </IconButton>\r\n         </h3>\r\n         <div>\r\n            <AddItemFrom addItem={addTask}/>\r\n         </div>\r\n            {\r\n               props.tasks.map(t => {\r\n                  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n                     props.changeTaskStatus(props.todoID, t.id, e.currentTarget.checked)\r\n\r\n                  const onClickHandler = () => props.removeTask(props.todoID, t.id)\r\n\r\n                  const onChangeTitle = (title: string) => props.changeTaskTitle(props.todoID, t.id, title)\r\n\r\n                  return <div key={t.id} className={styles.task}>\r\n                     <Checkbox\r\n                        color=\"primary\"\r\n                        checked={t.isDone} onChange={onChangeHandler}\r\n                     />\r\n                     <EditableSpan value={t.title} changeValue={onChangeTitle}/>\r\n                     <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n                        <DeleteIcon color=\"action\"/>\r\n                     </IconButton>\r\n                  </div>\r\n               })\r\n            }\r\n         <div>\r\n            <ButtonGroup color=\"primary\" aria-label=\"filter button group\">\r\n               <Button onClick={() => onClickFilter('all')}\r\n                       variant={filterBtnVariant('all')}>All</Button>\r\n               <Button onClick={() => onClickFilter('active')}\r\n                       variant={filterBtnVariant('active')}>Active</Button>\r\n               <Button onClick={() => onClickFilter('completed')}\r\n                       variant={filterBtnVariant('completed')}>Completed</Button>\r\n            </ButtonGroup>\r\n         </div>\r\n      </Paper>\r\n   )\r\n}\r\n\r\nexport default Todolist\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Todolist from './components/Todolist/Todolist';\r\nimport AddItemFrom from './components/ AddItemForm/AddItemForm';\r\nimport {AppBar} from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuOutlinedIcon from '@material-ui/icons/MenuOutlined';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport * as todoACs from './store/todolist/todolistAction';\r\nimport * as taskACs from './store/task/taskAction';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store/store';\r\nimport {FilterType, TodolistType} from './store/todolist/todolistsType';\r\nimport {TasksStateType} from './store/task/taskType';\r\n\r\nfunction App() {\r\n\r\n   const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todo)\r\n   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.task)\r\n   const dispatch = useDispatch()\r\n\r\n   const addTodo = (title: string) => {\r\n      dispatch(todoACs.addTodoAC(title))\r\n   }\r\n\r\n   const removeTodo = (todoID: string) => {\r\n      dispatch(todoACs.removeTodoAC(todoID))\r\n   }\r\n\r\n   const changeTodoTitle = (todoID: string, value: string) => {\r\n      dispatch(todoACs.changeTitleTodoAC(todoID, value))\r\n   }\r\n\r\n   const changeFilter = (todoID: string, value: FilterType) => {\r\n      dispatch(todoACs.changeFilterTodoAC(todoID, value))\r\n   }\r\n\r\n   const addTask = (todoID: string, title: string) => {\r\n      dispatch(taskACs.addTaskAC(todoID, title))\r\n   }\r\n\r\n   const removeTask = (todoID: string, taskID: string) => {\r\n      dispatch(taskACs.removeTaskAC(todoID, taskID))\r\n   }\r\n\r\n   const changeTaskStatus = (todoID: string, taskID: string, value: boolean) => {\r\n      dispatch(taskACs.changeStatusTaskAC(todoID, taskID, value))\r\n   }\r\n\r\n   const changeTaskTitle = (todoID: string, taskID: string, value: string) => {\r\n      dispatch(taskACs.changeTitleTaskAC(todoID, taskID, value))\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <AppBar position=\"static\">\r\n            <Toolbar>\r\n               <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                  <MenuOutlinedIcon/>\r\n               </IconButton>\r\n               <Typography variant=\"h6\">\r\n                  Todo\r\n               </Typography>\r\n               <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n         </AppBar>\r\n\r\n         <Container fixed>\r\n            <Grid container style={{padding: '10px'}}>\r\n               <AddItemFrom addItem={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n               {\r\n                  todolists.map(todo => {\r\n                     let filterTasks\r\n                     switch (todo.filter) {\r\n                        case 'active':\r\n                           filterTasks = tasks[todo.id].filter(t => !t.isDone)\r\n                           break\r\n                        case 'completed':\r\n                           filterTasks = tasks[todo.id].filter(t => t.isDone)\r\n                           break\r\n                        default:\r\n                           filterTasks = tasks[todo.id]\r\n                     }\r\n\r\n                     return <Grid item key={todo.id}>\r\n                        <Todolist todoID={todo.id}\r\n                                  title={todo.title}\r\n                                  tasks={filterTasks}\r\n                                  filter={todo.filter}\r\n                                  removeTodo={removeTodo}\r\n                                  changeTodoTitle={changeTodoTitle}\r\n                                  removeTask={removeTask}\r\n                                  addTask={addTask}\r\n                                  changeTaskStatus={changeTaskStatus}\r\n                                  changeTaskTitle={changeTaskTitle}\r\n                                  changeFilter={changeFilter}/>\r\n                     </Grid>\r\n                  })\r\n               }\r\n            </Grid>\r\n         </Container>\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","import {ADD_TODO, CHANGE_FILTER_TODO, CHANGE_TITLE_TODO, FilterType, REMOVE_TODO} from './todolistsType';\r\nimport {v1} from 'uuid';\r\n\r\nexport type AddTodoActionType = { type: typeof ADD_TODO, todoID: string, title: string }\r\nexport const addTodoAC = (title: string): AddTodoActionType => {\r\n   return {\r\n      type: ADD_TODO,\r\n      todoID: v1(),\r\n      title,\r\n   }\r\n}\r\n\r\nexport type RemoveTodoActionType = { type: typeof REMOVE_TODO, todoID: string }\r\nexport const removeTodoAC = (todoID: string): RemoveTodoActionType => {\r\n   return {\r\n      type: REMOVE_TODO,\r\n      todoID,\r\n   }\r\n}\r\n\r\ntype ChangeTitleTodoActionType = { type: typeof CHANGE_TITLE_TODO, todoID: string, newValue: string }\r\nexport const changeTitleTodoAC = (todoID: string, newValue: string): ChangeTitleTodoActionType => {\r\n   return {\r\n      type: CHANGE_TITLE_TODO,\r\n      todoID,\r\n      newValue,\r\n   }\r\n}\r\n\r\ntype ChangeFilterTodoActionType = { type: typeof CHANGE_FILTER_TODO, todoID: string, newValue: FilterType }\r\nexport const changeFilterTodoAC = (todoID: string, newValue: FilterType): ChangeFilterTodoActionType => {\r\n   return {\r\n      type: CHANGE_FILTER_TODO,\r\n      todoID,\r\n      newValue,\r\n   }\r\n}\r\n\r\nexport type ActionType\r\n   = AddTodoActionType\r\n   | RemoveTodoActionType\r\n   | ChangeTitleTodoActionType\r\n   | ChangeFilterTodoActionType\r\n","export const ADD_TODO = 'ADD_TODO'\r\nexport const REMOVE_TODO = 'REMOVE_TODO'\r\nexport const CHANGE_TITLE_TODO = 'CHANGE_TITLE_TODO'\r\nexport const CHANGE_FILTER_TODO = 'CHANGE_FILTER_TODO'\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistType = {\r\n   id: string\r\n   title: string\r\n   filter: FilterType\r\n}\r\n","import {ADD_TASK, CHANGE_STATUS_TASK, CHANGE_TITLE_TASK, REMOVE_TASK} from './taskType';\r\nimport {AddTodoActionType, RemoveTodoActionType} from '../todolist/todolistAction';\r\n\r\ntype AddTaskActionType = { type: typeof ADD_TASK, todoID: string, title: string }\r\nexport const addTaskAC = (todoID: string, title: string): AddTaskActionType => {\r\n   return {\r\n      type: ADD_TASK,\r\n      todoID,\r\n      title,\r\n   }\r\n}\r\n\r\ntype RemoveTaskActionType = { type: typeof REMOVE_TASK, todoID: string, taskID: string }\r\nexport const removeTaskAC = (todoID: string, taskID: string): RemoveTaskActionType => {\r\n   return {\r\n      type: REMOVE_TASK,\r\n      todoID,\r\n      taskID,\r\n   }\r\n}\r\n\r\ntype ChangeStatusTaskActionType = { type: typeof CHANGE_STATUS_TASK, todoID: string, taskID: string, newValue: boolean }\r\nexport const changeStatusTaskAC = (todoID: string, taskID: string, newValue: boolean): ChangeStatusTaskActionType => {\r\n   return {\r\n      type: CHANGE_STATUS_TASK,\r\n      todoID,\r\n      taskID,\r\n      newValue,\r\n   }\r\n}\r\n\r\ntype ChangeTitleTaskActionType = { type: typeof CHANGE_TITLE_TASK, todoID: string, taskID: string, newValue: string }\r\nexport const changeTitleTaskAC = (todoID: string, taskID: string, newValue: string): ChangeTitleTaskActionType => {\r\n   return {\r\n      type: CHANGE_TITLE_TASK,\r\n      todoID,\r\n      taskID,\r\n      newValue,\r\n   }\r\n}\r\n\r\nexport type ActionType\r\n   = AddTaskActionType\r\n   | RemoveTaskActionType\r\n   | ChangeStatusTaskActionType\r\n   | ChangeTitleTaskActionType\r\n   | AddTodoActionType\r\n   | RemoveTodoActionType\r\n","export const ADD_TASK = 'ADD_TASK'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK'\r\nexport const CHANGE_TITLE_TASK = 'CHANGE_TITLE_TASK'\r\n\r\nexport type TasksType = {\r\n   id: string\r\n   title: string\r\n   isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n   [key: string]: TasksType[]\r\n}\r\n","import {ActionType} from './todolistAction';\r\nimport {TodolistType} from './todolistsType';\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionType): TodolistType[] => {\r\n   switch (action.type) {\r\n      case 'ADD_TODO':\r\n         return [\r\n            {id: action.todoID, title: action.title, filter: 'all'},\r\n            ...state,\r\n         ]\r\n      case 'REMOVE_TODO':\r\n         return state.filter(t => t.id !== action.todoID)\r\n      case 'CHANGE_TITLE_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               t.title = action.newValue\r\n               return t\r\n            }\r\n            return t\r\n         })\r\n      case 'CHANGE_FILTER_TODO':\r\n         return state.map(t => {\r\n            if (t.id === action.todoID) {\r\n               t.filter = action.newValue\r\n               return t\r\n            }\r\n            return t\r\n         })\r\n      default:\r\n         return [...state]\r\n   }\r\n}\r\n","import {ActionType} from './taskAction';\r\nimport {TasksStateType} from './taskType';\r\nimport {v1} from 'uuid';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n   switch (action.type) {\r\n      case 'ADD_TASK':\r\n         const newTask = {id: v1(), title: action.title, isDone: false}\r\n         return {\r\n            ...state,\r\n            [action.todoID]: [newTask, ...state[action.todoID]],\r\n         }\r\n      case 'REMOVE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: [...state[action.todoID].filter(t => t.id !== action.taskID)],\r\n         }\r\n      case 'CHANGE_STATUS_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: [...state[action.todoID].map(t => {\r\n               if (t.id !== action.taskID) return t\r\n               return {...t, isDone: action.newValue}\r\n            })]\r\n         }\r\n      case 'CHANGE_TITLE_TASK':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: [...state[action.todoID].map(t => {\r\n               if (t.id !== action.taskID) return t\r\n               return {...t, title: action.newValue}\r\n            })]\r\n         }\r\n      case 'ADD_TODO':\r\n         return {\r\n            ...state,\r\n            [action.todoID]: []\r\n         }\r\n      case 'REMOVE_TODO':\r\n         delete state[action.todoID]\r\n         return {...state}\r\n      default:\r\n         return {...state}\r\n   }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {todolistReducer} from './todolist/todolistReducer';\r\nimport {taskReducer} from './task/taskReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n   todo: todolistReducer,\r\n   task: taskReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Provider store={store}>\r\n         <App/>\r\n      </Provider>\r\n   </React.StrictMode>,\r\n   document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}